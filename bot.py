import asyncio
import logging
import pytz
import aiogram
logging.info("Aiogram version:", aiogram.__version__)

from datetime import datetime, time as dt_time
from config import TOKEN
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
from aiogram.fsm.storage.memory import MemoryStorage

from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from handlers import start_handler, program_handler, shop_handler
from services.google_sheets_service import get_all_users, log_payment_event
from services.user_service import add_paid_questions
from utils.keyboard import get_question_packages_keyboard, get_subscription_packages_keyboard
from handlers.start_handler import EnsureUserMiddleware


# --- Webhook –æ—Ç –Æ–ö–∞—Å—Å—ã ---
async def handle_payment_webhook(request):
    data = await request.json()
    event_type = data.get("event")
    obj = data.get("object", {})

    metadata = obj.get("metadata", {})
    user_id = metadata.get("user_id", "unknown")
    questions = metadata.get("questions", "0")
    amount = obj.get("amount", {}).get("value", "0.00")
    payment_id = obj.get("id", "")
    status = obj.get("status", "unknown")

    logging.info(f"[YooKassa] Event: {event_type} | Status: {status} | User: {user_id} | Questions: {questions}")

    if event_type == "payment.succeeded":
        from services.user_service import add_paid_questions, get_user_profile, determine_status, update_user_data
        success = add_paid_questions(int(user_id), int(questions))
        logging.info(f"[YooKassa] –í–æ–ø—Ä–æ—Å—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã: {success}")
        log_payment_event(user_id, amount, questions, status, event_type, payment_id)

        # üëá –í—Å—Ç–∞–≤–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ light/pro
        premium = metadata.get("status")
        if premium in ("light", "pro"):
            from datetime import datetime, timedelta
            days = 7 if premium == "light" else 30
            until_date = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d")

            update_user_data(int(user_id), {
                "premium_status": premium,
                "premium_until": until_date
            })

            try:
                await bot.send_message(
                    chat_id=int(user_id),
                    text=(
                        f"üéâ –°—Ç–∞—Ç—É—Å <b>{premium.capitalize()}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ <b>{until_date}</b>!\n"
                        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –æ–±—É—á–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –±–æ–Ω—É—Å–æ–≤ üöÄ"
                    ),
                    parse_mode="HTML"
                )
            except Exception as e:
                logging.info(f"[YooKassa] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        if success:
            try:
                profile = get_user_profile(int(user_id))
                is_first_purchase = profile["paid_questions"] == 0
                if is_first_purchase:
                    from services.user_service import update_user_xp
                    update_user_xp(int(user_id), xp_gain=2)
                xp = profile.get("xp", 0)
                current_status, _ = determine_status(xp)
                next_status_info = {
                    "–Ω–æ–≤–∏—á–æ–∫": ("–æ–ø—ã—Ç–Ω—ã–π", 11),
                    "–æ–ø—ã—Ç–Ω—ã–π": ("–ø—Ä–æ—Ñ–∏", 51),
                    "–ø—Ä–æ—Ñ–∏": ("—ç–∫—Å–ø–µ—Ä—Ç", 101),
                    "—ç–∫—Å–ø–µ—Ä—Ç": ("—ç–∫—Å–ø–µ—Ä—Ç", 9999)
                }
                next_status, xp_target = next_status_info.get(current_status, ("–æ–ø—ã—Ç–Ω—ã–π", 11))
                xp_left = max(0, xp_target - xp)

                if int(questions) == 1:
                    text = "‚úÖ –¢—ã –∫—É–ø–∏–ª 1 –≤–æ–ø—Ä–æ—Å. –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ –±–æ–ª—å—à–∏–º –∑–Ω–∞–Ω–∏—è–º! üìò"
                elif int(questions) == 10:
                    text = "‚úÖ +10 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™"
                elif int(questions) == 50:
                    text = "üí• –¶–µ–ª—ã—Ö 50 –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è! –¢—ã –∑–∞—Ä—è–∂–µ–Ω –Ω–∞ —É—Å–ø–µ—Ö! üöÄ"
                elif int(questions) == 100:
                    text = "üëë 100 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –º–æ—â–Ω—ã–π –≤—ã–±–æ—Ä! –í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º! üß†"
                else:
                    text = f"‚úÖ –í–æ–ø—Ä–æ—Å—ã ({questions}) —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!"

                if is_first_purchase:
                    text += "\n\nüéÅ –ë–æ–Ω—É—Å: +2 XP –∑–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É!"

                text += f"\n\nüßÆ –û—Å—Ç–∞–ª–æ—Å—å {xp_left} XP –¥–æ —É—Ä–æ–≤–Ω—è ¬´{next_status}¬ª."
                text += "\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –¥–æ–≤–µ—Ä–∏–µ ‚ù§Ô∏è"

                await bot.send_message(
                    chat_id=int(user_id),
                    text=text
                )
            except Exception as e:
                logging.info(f"[YooKassa] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        return web.Response(text="OK")

    elif event_type == "payment.canceled":
        log_payment_event(user_id, amount, questions, status, event_type, payment_id)
        logging.info(f"[YooKassa] –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        try:
            await bot.send_message(
                chat_id=int(user_id),
                text=(
                    "‚ùå –ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.\n"
                    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º, –∏ –º—ã –ø–æ–º–æ–∂–µ–º! üí¨"
                )
            )
        except Exception as e:
            logging.info(f"[YooKassa] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        return web.Response(text="CANCELLED")

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–µ—á–µ—Ä–æ–º ---  
async def send_daily_reminder(bot: Bot):
    while True:
        now = datetime.now(pytz.timezone("Europe/Moscow"))

        # –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –≤ 10:00
        if now.time() >= dt_time(10, 0) and now.time() < dt_time(10, 1):
            users = get_all_users()
            for user in users:
                try:
                    await bot.send_message(
                        chat_id=int(user["user_id"]),
                        text="üß† –ù–µ –∑–∞–±—É–¥—å —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ ‚Äî –∑–∞–¥–∞–π 3 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å!",
                        disable_notification=True
                    )
                except Exception as e:
                    logging.info(f"‚ùå –£—Ç—Ä–æ–º: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user['user_id']}: {e}")
            await asyncio.sleep(60)

        # –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –≤ 18:34
        if now.time() >= dt_time(18, 34) and now.time() < dt_time(18, 35):
            users = get_all_users()
            today = now.date()
            for user in users:
                try:
                    last_interaction = user.get("last_interaction", "")
                    if last_interaction:
                        last_date = datetime.strptime(last_interaction, "%Y-%m-%d %H:%M:%S").date()
                        if last_date < today:
                            await bot.send_message(
                                chat_id=int(user["user_id"]),
                                text="üìå –°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â—ë –Ω–µ –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ –±–æ–Ω—É—Å!",
                                disable_notification=True
                            )
                except Exception as e:
                    logging.info(f"‚ùå –í–µ—á–µ—Ä–æ–º: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user['user_id']}: {e}")
            await asyncio.sleep(60)

        await asyncio.sleep(30)

# –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –≤ 7:00 –ú–°–ö
async def schedule_leaderboard_update():
    while True:
        now = datetime.now(pytz.timezone("Europe/Moscow"))
        if now.time().hour == 7 and now.time().minute == 0:
            print("[Scheduler] –û–±–Ω–æ–≤–ª—è—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥...")
            await asyncio.sleep(60)
        await asyncio.sleep(30)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    logging.basicConfig(level=logging.WARNING)

    dp = Dispatcher(storage=MemoryStorage())

    dp.include_router(start_handler.router)
    dp.include_router(program_handler.router)
    dp.include_router(shop_handler.router)
    dp.message.middleware(EnsureUserMiddleware())

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook Telegram
    await bot.set_webhook(
        "https://tg-bot-ai-teyr.onrender.com/telegram",
        drop_pending_updates=True
    )

    # Telegram + YooKassa webhook
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/telegram")
    setup_application(app, dp)
    app.router.add_post("/payment/result", handle_payment_webhook)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

    logging.info("‚úÖ Webhook –¥–ª—è Telegram –∑–∞–ø—É—â–µ–Ω –Ω–∞ /telegram")
    logging.info("‚úÖ Webhook –¥–ª—è YooKassa –∑–∞–ø—É—â–µ–Ω –Ω–∞ /payment/result")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
    asyncio.create_task(send_daily_reminder(bot))
    asyncio.create_task(schedule_leaderboard_update())

    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())
