from aiogram import Router, F
from aiogram.types import Message
from config import ADMIN_ID
from services.google_sheets_service import get_all_users
from keyboards.admin import get_admin_menu_keyboard, get_subscription_choice_keyboard
from keyboards.main_menu import get_main_menu_keyboard
from aiogram.fsm.context import FSMContext
from states.admin_states import GrantSubscription, Broadcast
from services.user_service import activate_subscription, get_status_by_xp
from datetime import datetime, timedelta
from aiogram.exceptions import TelegramForbiddenError
from aiogram.fsm.filter import StateFilter 



router = Router()


@router.message(F.text == "üõ† –ê–¥–º–∏–Ω")
async def show_admin_menu(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    await message.answer(
        "<b>üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu_keyboard()
    )


@router.message(F.text == "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def admin_user_stats(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    users = await get_all_users()
    total = len(users)

    lite = sum(1 for u in users if u.get("plan") == "lite")
    pro = sum(1 for u in users if u.get("plan") == "pro")
    free = total - lite - pro

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"üë• –í—Å–µ–≥–æ: <b>{total}</b>\n"
        f"üîì –õ–∞–π—Ç: <b>{lite}</b>\n"
        f"üîê –ü—Ä–æ: <b>{pro}</b>\n"
        f"üÜì –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{free}</b>"
    )


@router.message(F.text == "üèÜ –¢–æ–ø –ø–æ XP")
async def admin_top_xp(message: Message, state: FSMContext):

    if message.from_user.id != ADMIN_ID:
        return

    users = await get_all_users()
    scored = []

    for u in users:
        try:
            xp = int(u.get("xp", 0))
            name = u.get("first_name", "‚Äî") or "‚Äî"
            user_id = u.get("user_id")
            scored.append((xp, name, user_id))
        except:
            continue

    scored.sort(reverse=True)

    text = "üèÜ <b>–¢–û–ü-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP</b>\n\n"
    for idx, (xp, name, uid) in enumerate(scored[:10], start=1):
        status = get_status_by_xp(xp)
        text += f"{idx}. {name} ‚Äî {status}, {xp} XP (ID: <code>{uid}</code>)\n"

    await message.answer(text)

@router.message(F.text == "üé´ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def choose_subscription_type(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.set_state(GrantSubscription.plan_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:",
        reply_markup=get_subscription_choice_keyboard()
    )

@router.message(F.text == "üîë –õ–∞–π—Ç", GrantSubscription.plan_type)
async def grant_lite(message: Message, state: FSMContext):
    await state.set_state(GrantSubscription.waiting_for_user_id)
    await state.update_data(plan="lite")
    await message.answer("üî¢ –í–≤–µ–¥–∏ user_id, –∫–æ–º—É –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –õ–∞–π—Ç:\n\n‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã")

@router.message(F.text == "üîí –ü—Ä–æ", GrantSubscription.plan_type)
async def grant_pro(message: Message, state: FSMContext):
    await state.set_state(GrantSubscription.waiting_for_user_id)
    await state.update_data(plan="pro")
    await message.answer("üî¢ –í–≤–µ–¥–∏ user_id, –∫–æ–º—É –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ü—Ä–æ:\n\n‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã")


@router.message(GrantSubscription.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await state.clear()
        await message.answer("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_menu_keyboard())
        return

    data = await state.get_data()
    plan = data.get("plan")
    try:
        target_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π user_id.")
        return

    duration = 7 if plan == "lite" else 30
    until = (datetime.utcnow() + timedelta(days=duration)).strftime("%Y-%m-%d")

    await activate_subscription(user_id=target_id, duration_days=duration, internal_id=f"admin_{plan}")
    await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ <b>{plan.upper()}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{target_id}</code> –¥–æ {until}")

    await state.clear()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def cancel_subscription(message: Message, state: FSMContext):    
    await state.clear()
    await message.answer("‚ùå –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_keyboard())


@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.set_state(Broadcast.waiting_for_message)
    await message.answer("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@router.message(Broadcast.waiting_for_message)
async def process_broadcast(message: Message, state: FSMContext):
    text = message.text
    users = await get_all_users()

    success = 0
    failed = 0

    for u in users:
        user_id = u.get("user_id")
        if not user_id:
            continue
        try:
            await message.bot.send_message(chat_id=int(user_id), text=text)
            success += 1
        except TelegramForbiddenError:
            failed += 1
        except Exception:
            failed += 1

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚õî –û—à–∏–±–æ–∫: {failed}")
    await state.clear()


@router.message(F.text == "üîÅ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
async def admin_update_keywords_callback(message: Message, state: FSMContext):

    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")

    from services.keyword_updater import update_keywords_from_logs
    updated, failed = await update_keywords_from_logs()

    msg = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
    msg += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{len(updated)}</b>\n"
    msg += f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: <b>{len(failed)}</b>"

    if failed:
        msg += "\n\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n"
        for f in failed:
            msg += f"‚Ä¢ {f}\n"

    await message.answer(msg)

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard(message.from_user.id))
