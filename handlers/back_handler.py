from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from utils.context_stack import pop_step
from keyboards.main_menu import get_main_menu_keyboard
from keyboards.shop import get_shop_keyboard
from keyboards.admin import get_admin_menu_keyboard
from keyboards.info_keyboard import get_info_menu_keyboard
from keyboards.program import (
    get_level_keyboard,
    get_program_keyboard,
    get_module_keyboard,
    get_programs_by_level
)
from services.google_sheets_service import (
    get_modules_by_program,
    get_disciplines_by_module
)
from states.program_states import ProgramSelection

router = Router()


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def universal_back_handler(message: Message, state: FSMContext):
    previous = await pop_step(state)
    data = await state.get_data()

    if not previous:
        await state.clear()
        await message.answer("üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard(message.from_user.id))
        return

    if previous == "discipline":
        program = data.get("program")
        if not program:
            await state.clear()
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_menu_keyboard(message.from_user.id))
            return
        modules = await get_modules_by_program(program)
        await state.set_state(ProgramSelection.module)
        await message.answer("–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:", reply_markup=get_module_keyboard(modules))

    elif previous == "module":
        level = data.get("level")
        if not level:
            await state.clear()
            await message.answer("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ.", reply_markup=get_main_menu_keyboard(message.from_user.id))
            return
        programs = get_programs_by_level(level)
        await state.set_state(ProgramSelection.program)
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=get_program_keyboard(level))

    elif previous == "program":
        await state.set_state(ProgramSelection.level)
        await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=get_level_keyboard())

    elif previous == "level":
        await state.clear()
        await message.answer("üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard(message.from_user.id))

    elif previous == "shop":
        await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω", reply_markup=get_shop_keyboard())

    elif previous == "admin":
        await message.answer("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_menu_keyboard())

    elif previous == "info":
        await message.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", reply_markup=get_info_menu_keyboard())
    
    elif previous == "consultant":
        from keyboards.common import get_consultant_keyboard
        await state.set_state(ProgramSelection.asking)
        await message.answer("üí¨ –°–Ω–æ–≤–∞ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò:", reply_markup=get_consultant_keyboard())

    else:
        await state.clear()
        await message.answer("üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard(message.from_user.id))
