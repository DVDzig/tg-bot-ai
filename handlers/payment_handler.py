import uuid
import yookassa
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from services.yookassa_service import Payment, generate_payment_link

from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY
from handlers.shop_subscription_handler import log_pending_payment
from keyboards.shop import get_question_packages_keyboard


router = Router()

# –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á YooKassa
yookassa.Configuration.account_id = YOOKASSA_SHOP_ID
yookassa.Configuration.secret_key = YOOKASSA_SECRET_KEY

@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_payment(message: Message):
    user_id = message.from_user.id
    # –ü—Ä–∏–º–µ—Ä: —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 7 –¥–Ω–µ–π
    amount = 500  # –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å—É–º–º–∞
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π"
    
    try:
        payment_link = generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

@router.callback_query(F.data.startswith("buy_questions_"))
async def handle_buy_questions(call: CallbackQuery):
    await call.answer()

    quantity = int(call.data.split("_")[-1])
    prices = {
        1: 10,
        10: 90,
        50: 450,
        100: 900,
    }

    amount = prices.get(quantity)
    if not amount:
        await call.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç.")
        return

    payment_id = str(uuid.uuid4())
    user_id = call.from_user.id

    # –õ–æ–≥–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –ø–ª–∞—Ç—ë–∂
    await log_pending_payment(user_id, payment_id, quantity, "questions")

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
    payment = Payment.create({
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/TGTutorBot"  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω–æ–µ
        },
        "capture": True,
        "description": f"{quantity} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è user_id {user_id}",
        "metadata": {
            "user_id": str(user_id),
            "payment_type": "questions",
            "quantity": quantity,
            "internal_id": payment_id
        }
    })

    confirm_url = payment.confirmation.confirmation_url
    await call.message.answer(
        f"üßæ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
        f"–¢—ã –≤—ã–±—Ä–∞–ª {quantity} –≤–æ–ø—Ä–æ—Å(–æ–≤) –∑–∞ {amount}‚ÇΩ.\n"
        f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n\n"
        f"<a href='{confirm_url}'>üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa</a>",
        disable_web_page_preview=True
    )
