from aiogram import Router, F
from aiogram.types import Message
from services.yookassa_service import Payment
from services.log_service import log_pending_payment
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY
import yookassa
import uuid

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π YooKassa
yookassa.Configuration.account_id = YOOKASSA_SHOP_ID
yookassa.Configuration.secret_key = YOOKASSA_SECRET_KEY

# –ü–æ–¥–ø–∏—Å–∫–∞
@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_payment(message: Message):
    user_id = message.from_user.id
    amount = 500
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π"
    payment_id = str(uuid.uuid4())

    await log_pending_payment(user_id, payment_id, 7, "subscription")

    payment = Payment.create({
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/TGTutorBot"
        },
        "capture": True,
        "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç (7 –¥–Ω–µ–π) –¥–ª—è user_id {user_id}",
        "metadata": {
            "user_id": str(user_id),
            "payment_type": "subscription",
            "quantity": 7,
            "internal_id": payment_id
        }
    })

    confirm_url = payment.confirmation.confirmation_url
    await message.answer(
        f"üßæ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        f"–¢—ã –≤—ã–±—Ä–∞–ª –ø–æ–¥–ø–∏—Å–∫—É –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π –∑–∞ {amount}‚ÇΩ.\n"
        f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n\n"
        f"<a href='{confirm_url}'>üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa</a>",
        disable_web_page_preview=True
    )


# –ü–æ–∫—É–ø–∫–∞ 1 –≤–æ–ø—Ä–æ—Å–∞
@router.message(F.text == "üü¢ –ö—É–ø–∏—Ç—å 1 –≤–æ–ø—Ä–æ—Å (10‚ÇΩ)")
async def buy_1_question(message: Message):
    await process_question_payment(message, 1, 10)

# –ü–æ–∫—É–ø–∫–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "üîπ –ö—É–ø–∏—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤ (90‚ÇΩ)")
async def buy_10_questions(message: Message):
    await process_question_payment(message, 10, 90)

# –ü–æ–∫—É–ø–∫–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "üöÄ –ö—É–ø–∏—Ç—å 50 –≤–æ–ø—Ä–æ—Å–æ–≤ (450‚ÇΩ)")
async def buy_50_questions(message: Message):
    await process_question_payment(message, 50, 450)

# –ü–æ–∫—É–ø–∫–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "üëë –ö—É–ø–∏—Ç—å 100 –≤–æ–ø—Ä–æ—Å–æ–≤ (900‚ÇΩ)")
async def buy_100_questions(message: Message):
    await process_question_payment(message, 100, 900)


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
async def process_question_payment(message: Message, quantity: int, amount: int):
    user_id = message.from_user.id
    payment_id = str(uuid.uuid4())

    await log_pending_payment(user_id, payment_id, quantity, "questions")

    payment = Payment.create({
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/TGTutorBot"
        },
        "capture": True,
        "description": f"{quantity} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è user_id {user_id}",
        "metadata": {
            "user_id": str(user_id),
            "payment_type": "questions",
            "quantity": quantity,
            "internal_id": payment_id
        }
    })

    confirm_url = payment.confirmation.confirmation_url
    await message.answer(
        f"üßæ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
        f"–¢—ã –≤—ã–±—Ä–∞–ª {quantity} –≤–æ–ø—Ä–æ—Å(–æ–≤) –∑–∞ {amount}‚ÇΩ.\n"
        f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n\n"
        f"<a href='{confirm_url}'>üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa</a>",
        disable_web_page_preview=True
    )
