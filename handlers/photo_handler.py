from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from datetime import datetime
from config import PHOTO_ARCHIVE_FOLDER_ID
from io import BytesIO

from services.user_service import get_user_row_by_id, update_user_after_answer, decrease_question_limit
from services.vision_service import extract_text_from_image
from services.google_drive_service import upload_image_to_drive
from services.google_sheets_service import log_photo_request
from services.gpt_service import generate_answer
from states.program_states import ProgramSelection

router = Router()

@router.message(ProgramSelection.asking, F.photo)
async def handle_photo_with_test(message: Message, state: FSMContext):
    print("[DEBUG] handle_photo_with_test called ‚úÖ")

    user_id = message.from_user.id
    row = await get_user_row_by_id(user_id)
    if not row:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    plan = row.get("plan", "").lower()
    status = row.get("status", "").split()[-1]

    if plan != "pro" and status not in ["–≠–∫—Å–ø–µ—Ä—Ç", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–õ–µ–≥–µ–Ω–¥–∞", "–°–æ–∑–¥–∞—Ç–µ–ª—å"]:
        await message.answer("üõë –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≠–∫—Å–ø–µ—Ä—Ç+ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–æ–π –ü—Ä–æ.")
        return

    success = await decrease_question_limit(user_id)
    if not success:
        await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –ª–∏–º–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ üõí –ú–∞–≥–∞–∑–∏–Ω.")
        return

    await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Google Vision...")

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    image_data = await message.bot.download_file(file.file_path)

    try:
        text = extract_text_from_image(image_data)
    except Exception as e:
        print(f"[Vision API ERROR] {e}")
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_name = f"photo_{user_id}_{now}.png"

    upload_image_to_drive(file_name, BytesIO(image_data), folder_id=PHOTO_ARCHIVE_FOLDER_ID)

    if not text.strip():
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å —á—ë—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.")
        return

    await message.answer(f"üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<pre>{text}</pre>", parse_mode="HTML")

    try:
        answer = await generate_answer("–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑", "–¢–µ—Å—Ç", "–§–æ—Ç–æ–∑–∞–ø—Ä–æ—Å", text)
        await message.answer(f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò:\n\n{answer}")
        await update_user_after_answer(user_id, bot=message.bot)
        await log_photo_request(user_id, text, answer)
    except Exception as e:
        print(f"[GPT ERROR] {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    await state.set_state(ProgramSelection.asking)

@router.message(F.photo)
async def reject_photo_outside_context(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != ProgramSelection.asking:
        await message.answer("üì∏ –§–æ—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –º–µ–Ω—é –æ–±—â–µ–Ω–∏—è —Å –ò–ò –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.")
