from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from datetime import datetime
from config import PHOTO_ARCHIVE_FOLDER_ID
from io import BytesIO

from services.user_service import get_user_row_by_id, update_user_after_answer, decrease_question_limit
from services.vision_service import extract_text_from_image
from services.google_drive_service import upload_image_to_drive
from services.google_sheets_service import log_photo_request
from services.gpt_service import generate_answer
from states.program_states import ProgramSelection

router = Router()

@router.message(ProgramSelection.asking, F.photo)
async def handle_photo_with_test(message: Message, state: FSMContext):
    print("[DEBUG] üß† –í–æ—à—ë–ª –≤ handle_photo_with_test")

    user_id = message.from_user.id
    print(f"[DEBUG] üì• user_id = {user_id}")

    row = await get_user_row_by_id(user_id)
    if not row:
        print("[DEBUG] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    plan = row.get("plan", "").lower()
    status = row.get("status", "").split()[-1]
    print(f"[DEBUG] üìä –°—Ç–∞—Ç—É—Å: {status}, –ü–ª–∞–Ω: {plan}")

    if plan != "pro" and status not in ["–≠–∫—Å–ø–µ—Ä—Ç", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–õ–µ–≥–µ–Ω–¥–∞", "–°–æ–∑–¥–∞—Ç–µ–ª—å"]:
        print("[DEBUG] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        await message.answer("üõë –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≠–∫—Å–ø–µ—Ä—Ç+ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–æ–π –ü—Ä–æ.")
        return

    success = await decrease_question_limit(user_id)
    print(f"[DEBUG] ‚úÖ –õ–∏–º–∏—Ç —Å–ø–∏—Å–∞–Ω: {success}")
    if not success:
        await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –ª–∏–º–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ üõí –ú–∞–≥–∞–∑–∏–Ω.")
        return

    await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Google Vision...")

    try:
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        image_data = await message.bot.download_file(file.file_path)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    try:
        text = extract_text_from_image(image_data)
    except Exception as e:
        print(f"[ERROR] Vision API Error: {e}")
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    await state.set_state(ProgramSelection.asking)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ asking
    print("[DEBUG] üîÅ FSM –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ asking")

@router.message(F.photo)
async def reject_photo_outside_context(message: Message, state: FSMContext):
    current = await state.get_state()
    print(f"[DEBUG] üßê –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current}")
    if current is None:
        # –ò–Ω–æ–≥–¥–∞ FSM –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer("üì∏ –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –≤—ã–±—Ä–∞–ª –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –µ—ë –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ.")
    elif current != ProgramSelection.asking:
        await message.answer("üì∏ –§–æ—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –º–µ–Ω—é –æ–±—â–µ–Ω–∏—è —Å –ò–ò –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.")
