from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from io import BytesIO
from datetime import datetime
from config import PHOTO_ARCHIVE_FOLDER_ID

from services.user_service import (
    get_user_row_by_id,
    decrease_question_limit,
    update_user_after_answer,
)
from services.google_drive_service import upload_image_to_drive
from services.google_sheets_service import log_photo_request
from services.gpt_service import generate_answer
from services.vision_service import extract_text_with_docs_ocr
from states.program_states import ProgramSelection

router = Router()

@router.message(F.photo)
async def handle_photo_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    print(f"[DEBUG] üì• –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        image_data = await message.bot.download_file(file.file_path)
        image_bytes = image_data.read()
        print("[DEBUG] üì∑ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    try:
        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
        text = extract_text_with_docs_ocr(BytesIO(image_bytes))
        print(f"[DEBUG] üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
    except Exception as e:
        print(f"[ERROR] OCR Error: {e}")
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if not text.strip():
        await message.answer("üîç –ù–∞ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç.")
        return

    await message.answer(f"üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<pre>{text}</pre>", parse_mode="HTML")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    row = await get_user_row_by_id(user_id)
    if not row:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    plan = row.get("plan", "").lower()
    status = row.get("status", "").split()[-1]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if plan != "pro" and status not in ["–≠–∫—Å–ø–µ—Ä—Ç", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–õ–µ–≥–µ–Ω–¥–∞", "–°–æ–∑–¥–∞—Ç–µ–ª—å"]:
        await message.answer("üõë –§–æ—Ç–æ-–≤–æ–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≠–∫—Å–ø–µ—Ä—Ç+ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ü—Ä–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    success = await decrease_question_limit(user_id)
    if not success:
        await message.answer("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø–æ–ª–Ω–∏ –≤ üõí –ú–∞–≥–∞–∑–∏–Ω–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ Google –î–∏—Å–∫
    try:
        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        file_name = f"photo_{user_id}_{now}.png"
        upload_image_to_drive(file_name, BytesIO(image_bytes), folder_id=PHOTO_ARCHIVE_FOLDER_ID)
        print("[DEBUG] ‚òÅÔ∏è –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤")
    except Exception as e:
        print(f"[ERROR] Google Drive Save Error: {e}")

    await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        data = await state.get_data()
        program = data.get("program")
        module = data.get("module")
        discipline = data.get("discipline")

        if not all([program, module, discipline]):
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –º–æ–¥—É–ª—å –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏—Ö –∑–∞–Ω–æ–≤–æ.")
            return

        answer = await generate_answer(program, module, discipline, text)
        await log_photo_request(user_id, text, answer, program, module, discipline)


        print("[DEBUG] ‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"[ERROR] GPT Error: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    # üß† –û–±–Ω–æ–≤–∏–º FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–æ–≤)
    await state.set_state(ProgramSelection.asking)

    # üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å, XP –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    xp = int(row.get("xp", 0))
    status = row.get("status", "–ù–æ–≤–∏—á–æ–∫")
    free_q = int(row.get("free_questions", 0))
    paid_q = int(row.get("paid_questions", 0))

    stats = (
        f"üß† XP: {xp} | –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üé´ –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ ‚Äî {free_q} | –ü–ª–∞—Ç–Ω—ã–µ ‚Äî {paid_q}"
    )
    await message.answer(stats)
