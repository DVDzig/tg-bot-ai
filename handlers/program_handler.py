from aiogram import Router, F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from config import USER_SHEET_NAME
from aiogram.fsm.context import FSMContext
from states.program_states import ProgramSelection
from services.google_sheets_service import (
    get_modules_by_program,
    get_disciplines_by_module,
    get_keywords_for_discipline,
    log_question_answer,
)
from services.sheets import (
    get_user_row_by_id, 
    update_sheet_row
) 
from services.gpt_service import generate_answer
from services.user_service import (
    get_user_row_by_id,
    increase_question_count,
    decrease_question_limit,
    add_xp_and_update_status,
    get_or_create_user
)
from keyboards.program import (
    get_level_keyboard,
    get_program_keyboard,
    get_module_keyboard,
    get_discipline_keyboard,
)
from keyboards.common import get_consultant_keyboard
from services.missions_service import check_and_apply_missions
from services.gpt_service import search_video_on_youtube
from datetime import datetime
import pytz

router = Router()


@router.message(F.text == "üí¨ –í—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã")
async def start_program_selection(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_level_keyboard()
    )
    await state.set_state(ProgramSelection.level)


@router.message(ProgramSelection.level)
async def select_program(message: Message, state: FSMContext):
    level = message.text
    await state.update_data(level=level)

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:",
        reply_markup=get_program_keyboard(level)
    )
    await state.set_state(ProgramSelection.program)


@router.message(ProgramSelection.program)
async def select_module(message: Message, state: FSMContext):
    program = message.text.strip("üìòüìóüìôüìïüììüìî ").strip()
    await state.update_data(program=program)

    modules = await get_modules_by_program(program)
    if not modules:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª–∏ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:",
        reply_markup=get_module_keyboard(modules)
    )
    await state.set_state(ProgramSelection.module)


@router.message(ProgramSelection.module)
async def select_discipline(message: Message, state: FSMContext):
    module = message.text
    await state.update_data(module=module)

    data = await state.get_data()
    program = data.get("program")

    disciplines = await get_disciplines_by_module(program, module)
    if not disciplines:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
        reply_markup=get_discipline_keyboard(disciplines)
    )
    await state.set_state(ProgramSelection.discipline)


@router.message(ProgramSelection.discipline)
async def start_asking(message: Message, state: FSMContext):
    discipline = message.text
    await state.update_data(discipline=discipline)

    await message.answer(
        f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ <b>{discipline}</b> –≤—ã–±—Ä–∞–Ω–∞.\n\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ!",
        reply_markup=get_consultant_keyboard()
    )
    await state.set_state(ProgramSelection.asking)

@router.message(ProgramSelection.asking)
async def handle_user_question(message: Message, state: FSMContext):
    user = message.from_user
    text = message.text.strip()
    data = await state.get_data()

    row = await get_user_row_by_id(user.id)
    if not row:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    plan = row.get("plan")
    free_q = int(row.get("free_questions", 0))
    paid_q = int(row.get("paid_questions", 0))

    if plan not in ("lite", "pro") and free_q + paid_q <= 0:
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã. –ö—É–ø–∏ –ø–∞–∫–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ üõí –ú–∞–≥–∞–∑–∏–Ω.")
        return

    program = data.get("program")
    module = data.get("module")
    discipline = data.get("discipline")

    keywords = await get_keywords_for_discipline(program=program, module=module, discipline=discipline)

    if not any(kw.lower() in text.lower() for kw in keywords):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ. –í –Ω—ë–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
        return

    await message.answer("‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

    answer = await generate_answer(program=program, module=module, discipline=discipline, user_question=text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status = row.get("status", "–ù–æ–≤–∏—á–æ–∫")
    videos_to_send = 0
    if status == "–ü—Ä–æ—Ñ–∏":
        videos_to_send = 1
    elif status == "–≠–∫—Å–ø–µ—Ä—Ç":
        videos_to_send = 2
    elif status in ("–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–õ–µ–≥–µ–Ω–¥–∞", "–°–æ–∑–¥–∞—Ç–µ–ª—å") or plan in ("lite", "pro"):
        videos_to_send = 3

    if videos_to_send > 0:
        video_urls = await search_video_on_youtube(f"{discipline} {text}", max_results=videos_to_send)
        for video_url in video_urls:
            await message.answer_video(video_url)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    header = f"üìö *–û—Ç–≤–µ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {discipline}*:\n\n"
    stats = (
        f"üß† –¢–≤–æ–π XP: {row.get('xp')} | –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üé´ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {row.get('free_questions', 0)}\n"
    )
    await message.answer(f"{header}{answer}\n\n{stats}", parse_mode="Markdown")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    await log_question_answer(user.id, program, discipline, text, answer)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await increase_question_count(user.id)
    if plan not in ("lite", "pro"):
        await decrease_question_limit(user.id)
    await add_xp_and_update_status(user.id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    updates = {
        "last_interaction": datetime.now(pytz.timezone("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
    }
    await update_sheet_row(row.sheet_id, row.sheet_name, row.index, updates)

    # –ù–∞–≥—Ä–∞–¥—ã
    rewards = await check_and_apply_missions(user.id)
    for r in rewards:
        await message.answer(r)
