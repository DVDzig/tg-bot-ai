from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

import logging
from datetime import datetime

from config import OPENAI_API_KEY

from handlers.start_handler import go_to_start_screen

from utils.keyboard import (
    get_modules_keyboard,
    get_disciplines_keyboard,
    get_question_keyboard,
    get_main_keyboard,
    get_levels_keyboard,
    get_bachelor_programs_keyboard,
    get_master_programs_keyboard
)

from services.gpt_service import generate_ai_response
from services.google_sheets_service import (
    get_modules,
    get_disciplines,
    log_user_activity,
    get_keywords_for_discipline,
    find_similar_questions,
    save_question_answer,
    get_all_valid_buttons
)
from services.youtube_search import search_youtube_videos
from services.qa_keywords_updater import update_keywords_from_qa
from services.user_service import (
    determine_status,
    check_and_apply_daily_challenge,
    update_user_data,
    check_thematic_challenge,
    get_user_row,
    can_ask_question_row,
    decrement_question_balance_row,
    update_user_xp_row,
    get_user_profile_from_row,
)


from services.missions import get_all_missions

ALLOWED_BUTTONS = get_all_valid_buttons()

router = Router()

BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

class ProgramStates(StatesGroup):
    choosing_level = State()
    choosing_program = State()
    choosing_module = State()
    choosing_discipline = State()
    asking_question = State()

@router.message(lambda msg: msg.text == BACK_BUTTON)
async def universal_back_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()

    if current_state == ProgramStates.asking_question.state:
        await state.set_state(ProgramStates.choosing_discipline)
        markup = get_disciplines_keyboard(data.get("module"))
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:", reply_markup=markup)

    elif current_state == ProgramStates.choosing_discipline.state:
        await state.set_state(ProgramStates.choosing_module)
        markup = get_modules_keyboard(data.get("program"))
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥—É–ª—è:", reply_markup=markup)

    elif current_state == ProgramStates.choosing_module.state:
        await state.set_state(ProgramStates.choosing_program)
        level = data.get("level")
        markup = get_bachelor_programs_keyboard() if level == "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" else get_master_programs_keyboard()
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã:", reply_markup=markup)

    elif current_state == ProgramStates.choosing_program.state:
        await state.set_state(ProgramStates.choosing_level)
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=get_levels_keyboard())

    elif current_state == ProgramStates.choosing_level.state:
        await state.clear()
        await go_to_start_screen(message)
    else:
        await state.clear()
        await go_to_start_screen(message)

@router.message(lambda msg: msg.text == "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
async def restart_bot(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(ProgramStates.choosing_level)
    await message.answer("üîÅ –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞! –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=get_levels_keyboard())

@router.message(lambda message: message.text == "üéì –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def choose_level_handler(message: Message, state: FSMContext):
    await state.set_state(ProgramStates.choosing_level)
    await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=get_levels_keyboard())

@router.message(ProgramStates.choosing_level)
async def level_selected(message: Message, state: FSMContext):
    level = message.text.replace("üéì ", "")
    await state.update_data(level=level)
    await state.set_state(ProgramStates.choosing_program)

    if level == "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç":
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞:", reply_markup=get_bachelor_programs_keyboard())
    elif level == "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞":
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã:", reply_markup=get_master_programs_keyboard())
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=get_levels_keyboard())

@router.message(ProgramStates.choosing_program)
async def choose_module_handler(message: Message, state: FSMContext):
    selected_program = message.text.replace("üìò ", "").replace("üìó ", "").replace("üìô ", "").replace("üìï ", "").replace("üìí ", "")
    level_data = await state.get_data()
    level = level_data.get("level")

    if level == "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç":
        valid_programs = ["–ú–†–ö", "–¢–ü–†", "–ë–•"]
    elif level == "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞":
        valid_programs = ["–ú–°–°", "–§–í–ú", "–°–ê"]
    else:
        await message.answer("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –í–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏ —Å–Ω–æ–≤–∞.")
        return

    if selected_program not in valid_programs:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    await state.update_data(program=selected_program)
    modules = get_modules(selected_program)
    if not modules:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        return

    await state.set_state(ProgramStates.choosing_module)
    is_admin = message.from_user.id == 150532949
    markup = get_modules_keyboard(selected_program, is_admin=is_admin)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:", reply_markup=markup)

@router.message(ProgramStates.choosing_module)
async def choose_discipline_handler(message: Message, state: FSMContext):
    if message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞":
        if message.from_user.id != 150532949:
            await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –≤—Å–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º...")
        update_keywords_from_qa()
        await message.answer("‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        return

    data = await state.get_data()
    current_program = data.get("program")
    modules = get_modules(current_program)
    selected_module = message.text.replace("üìó ", "").replace("\n", " ").strip()
    normalized_modules = [m.replace("\n", " ").strip() for m in modules]

    if selected_module not in normalized_modules:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    await state.update_data(module=selected_module)
    disciplines = get_disciplines(selected_module)
    if not disciplines:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è.")
        return

    await state.set_state(ProgramStates.choosing_discipline)
    markup = get_disciplines_keyboard(selected_module)
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=markup)

@router.message(ProgramStates.choosing_discipline)
async def choose_discipline_complete(message: Message, state: FSMContext):
    selected_discipline = message.text.replace("üìï ", "").replace("\n", " ").strip()
    data = await state.get_data()
    module = data.get("module")
    available_disciplines = get_disciplines(module)
    normalized_disciplines = [d.replace("\n", " ").strip() for d in available_disciplines]

    if selected_discipline not in normalized_disciplines:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    await state.update_data(discipline=selected_discipline)
    log_user_activity(
        user_id=message.from_user.id,
        plan=data.get("program"),
        module=module,
        discipline=selected_discipline
    )

    await state.set_state(ProgramStates.asking_question)
    markup = get_question_keyboard(is_admin=(message.from_user.id == 150532949))
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É: <b>{selected_discipline}</b>\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ–º–æ–≥—É!",
        parse_mode="HTML",
        reply_markup=markup
    )

# –ó–∞–ø—Ä–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –≤–Ω–µ –æ–±—â–µ–Ω–∏—è —Å –ò–ò
@router.message(StateFilter(None), lambda msg: msg.text not in ALLOWED_BUTTONS)
async def block_input(message: Message, state: FSMContext):
    await message.delete()
    await message.answer("‚ùó–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")


@router.message(ProgramStates.asking_question)
async def handle_user_question(message: Message, state: FSMContext):
    if message.text in ["üìó –ú–æ–¥—É–ª—å", "üìï –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"]:
        return

    user_id = message.from_user.id
    i, row = get_user_row(user_id)
    if not row:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    if not can_ask_question_row(row):
        profile = get_user_profile_from_row(row)
        premium = profile.get("premium_status", "none")

        text = "‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã!\n\n"
        if premium == "none":
            text += (
                "üîì <b>–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π?</b>\n\n"
                "‚Ä¢ <b>–õ–∞–π—Ç</b> ‚Äî –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 7 –¥–Ω–µ–π\n"
                "‚Ä¢ <b>–ü—Ä–æ</b> ‚Äî –≤–∏–¥–µ–æ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç –ò–ò\n\n"
                "–ù–∞–∂–º–∏ ¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª –Ω–∏–∂–µ ‚¨áÔ∏è"
            )
        else:
            text += "–¢—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ü§ñ"

        await message.answer(text, parse_mode="HTML", reply_markup=get_main_keyboard())
        await state.clear()
        return

    data = await state.get_data()
    discipline = data.get("discipline")
    program = data.get("program")
    module = data.get("module")
    question = message.text

    keywords = get_keywords_for_discipline(module, discipline)
    history = find_similar_questions(discipline, keywords or "")

    if not keywords or not any(kw.strip().lower() in question.lower() for kw in keywords.split(",") if kw.strip()):
        await message.answer(
            "‚ùå –ü–æ—Ö–æ–∂–µ, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ.",
            reply_markup=get_question_keyboard(is_admin=(user_id == 150532949))
        )
        return

    if not decrement_question_balance_row(i, row):
        await state.clear()
        await message.answer("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã!\n")
        await go_to_start_screen(message)
        return

    ai_response = generate_ai_response(question, keywords, history)
    save_question_answer(user_id, program, module, discipline, question, ai_response)

    # XP –∏ –ø—Ä–æ—Ñ–∏–ª—å
    new_xp, new_status = update_user_xp_row(i, row)
    profile = get_user_profile_from_row(row)
    premium = profile.get("premium_status", "none")
    free_q = profile.get("free_questions", 0)
    last_prompt = profile.get("last_upgrade_prompt", "")
    today = datetime.now().strftime("%Y-%m-%d")

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ –∞–ø–≥—Ä–µ–π–¥
    if premium == "none" and new_xp >= 50 and last_prompt != today:
        await message.answer(
            "üî• –¢—ã –∑–∞–¥–∞–ª —É–∂–µ –±–æ–ª—å—à–µ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∫—Ä—É—Ç–æ! üí™\n\n"
            "–•–æ—á–µ—à—å –µ—â—ë –±–æ–ª—å—à–µ?\n"
            "üí° <b>–õ–∞–π—Ç</b> ‚Äî –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 7 –¥–Ω–µ–π\n"
            "üöÄ <b>–ü—Ä–æ</b> ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –≤–∏–¥–µ–æ –∏ +100 –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
            "–î–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª</b> üëá",
            parse_mode="HTML"
        )
        update_user_data(user_id, {"last_upgrade_prompt": today})

    status, _, _ = determine_status(new_xp)
    thresholds = {
        "–Ω–æ–≤–∏—á–æ–∫": (0, 10),
        "–æ–ø—ã—Ç–Ω—ã–π": (11, 50),
        "–ø—Ä–æ—Ñ–∏": (51, 100),
        "—ç–∫—Å–ø–µ—Ä—Ç": (101, 200),
        "–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": (201, 500),
        "–ª–µ–≥–µ–Ω–¥–∞": (501, 1000),
        "—Å–æ–∑–¥–∞—Ç–µ–ª—å": (1001, 5000)
    }
    min_xp, max_xp = thresholds.get(status, (0, new_xp + 1))
    progress = min(100, int(((new_xp - min_xp) / (max_xp - min_xp)) * 100)) if max_xp > min_xp else 100
    progress_bar = "üü©" * min(5, int(progress / 1)) + "‚¨úÔ∏è" * (5 - min(5, int(progress / 1)))

    reply = (
        f"üìö <b>–û—Ç–≤–µ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ</b> <i>{discipline}</i>:\n\n"
        f"{ai_response}\n\n"
        f"üéØ –¢–≤–æ–π XP: {new_xp} | –°—Ç–∞—Ç—É—Å: {status} (–ø—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%)\n"
        f"üÜì –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {free_q}"
    )

    # –ú–∏—Å—Å–∏–∏
    completed_missions = []
    for mission in get_all_missions():
        try:
            if mission.check(user_id):
                completed_missions.append(f"üéØ {mission.title} +{mission.reward} XP")
        except:
            continue

    if completed_missions:
        reply += "\n\n" + "\n".join(completed_missions)

    if check_thematic_challenge(user_id):
        reply += "\n\nüìö –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–∏—Å—Å–∏—è: 3 –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∑–∞ –¥–µ–Ω—å! +5 XP"

    if check_and_apply_daily_challenge(user_id):
        reply += "\n\nüèÜ –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏ –ø–æ–ª—É—á–∏–ª +2 XP!"
        if premium == "none" and last_prompt != today:
            await message.answer(
                "üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –ø—Ä–æ–π–¥–µ–Ω ‚Äî —Å—É–ø–µ—Ä!\n\n"
                "–ì–æ—Ç–æ–≤ –¥–≤–∏–≥–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ –∏ –≥–ª—É–±–∂–µ? üìö\n"
                "üí° <b>–õ–∞–π—Ç</b> ‚Äî –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 7 –¥–Ω–µ–π\n"
                "üöÄ <b>–ü—Ä–æ</b> ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –≤–∏–¥–µ–æ –∏ +100 –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
                "–î–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª</b>",
                parse_mode="HTML"
            )
            update_user_data(user_id, {"last_upgrade_prompt": today})

    # –í–∏–¥–µ–æ
    video_count = 0
    if premium in ["light", "pro"]:
        video_count = 3
    elif status == "–ø—Ä–æ—Ñ–∏":
        video_count = 1
    elif status == "—ç–∫—Å–ø–µ—Ä—Ç":
        video_count = 2
    elif status in ["–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫", "–ª–µ–≥–µ–Ω–¥–∞", "—Å–æ–∑–¥–∞—Ç–µ–ª—å"]:
        video_count = 3

    if video_count > 0:
        videos = search_youtube_videos(question, max_results=video_count)
        if videos:
            reply += "\n\nüé• <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∏–¥–µ–æ:</b>\n"
            for link in videos:
                reply += f"{link}\n"

    await message.answer(reply, parse_mode="HTML", reply_markup=get_question_keyboard(is_admin=(user_id == 150532949)))
