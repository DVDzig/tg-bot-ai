from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from states.program_states import ProgramSelection
from keyboards.program import (
    get_level_keyboard,
    get_program_keyboard,
    get_module_keyboard,
    get_discipline_keyboard,
)
from keyboards.common import get_consultant_keyboard
from services.google_sheets_service import (
    get_modules_by_program,
    get_disciplines_by_module,
    get_keywords_for_discipline,
    log_question_answer,
    log_image_request,
    log_photo_request
)
from services.google_drive_service import upload_image_to_drive
from services.user_service import (
    get_user_row_by_id, 
    update_user_after_answer,
    decrease_question_limit
)
from services.gpt_service import generate_answer, search_video_on_youtube
from services.missions_service import check_and_apply_missions
from services.sheets import update_sheet_row
from datetime import datetime
import pytz
from keyboards.shop import get_shop_keyboard
from config import VIDEO_URLS, OPENAI_API_KEY, PHOTO_ARCHIVE_FOLDER_ID
import re
from openai import AsyncOpenAI
import asyncio
from services.vision_service import extract_text_from_image
from io import BytesIO



router = Router()

@router.message(F.text == "üí¨ –í—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã")
async def start_program_selection(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(ProgramSelection.level)
    await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=get_level_keyboard())

@router.message(ProgramSelection.level)
async def select_program(message: Message, state: FSMContext):
    if message.text not in ["üéì –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", "üéì –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"]:
        return
    level = message.text
    await state.update_data(level=level)
    await state.set_state(ProgramSelection.program)
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=get_program_keyboard(level))

@router.message(ProgramSelection.program)
async def select_module(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è":
        await state.clear()
        await state.set_state(ProgramSelection.level)
        await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=get_level_keyboard())
        return

    known_programs = ["üìò –ú–†–ö", "üìó –¢–ü–†", "üìô –ë–•", "üìï –ú–°–°", "üìì –°–ê", "üìî –§–í–ú"]
    if message.text not in known_programs:
        return

    program = message.text.strip("üìòüìóüìôüìïüììüìî ").strip()
    await state.update_data(program=program)
    modules = await get_modules_by_program(program)
    if not modules:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª–∏ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        return
    await state.set_state(ProgramSelection.module)
    await message.answer("–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:", reply_markup=get_module_keyboard(modules))

@router.message(ProgramSelection.module)
async def select_discipline(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã":
        data = await state.get_data()
        level = data.get("level")
        await state.set_state(ProgramSelection.program)
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=get_program_keyboard(level))
        return

    module = message.text.replace("üß©", "").strip()  # ‚úÖ –æ—á–∏—Å—Ç–∫–∞ –∏–∫–æ–Ω–∫–∏
    await state.update_data(module=module)
    data = await state.get_data()
    program = data.get("program")
    disciplines = await get_disciplines_by_module(program, module)
    if not disciplines:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è.")
        return
    await state.set_state(ProgramSelection.discipline)
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=get_discipline_keyboard(disciplines))

@router.message(ProgramSelection.discipline)
async def select_asking(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–æ–¥—É–ª–∏":
        data = await state.get_data()
        program = data.get("program")
        modules = await get_modules_by_program(program)
        await state.set_state(ProgramSelection.module)
        await message.answer("–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:", reply_markup=get_module_keyboard(modules))
        return

    discipline = message.text.replace("üß†", "").strip()
    await state.update_data(discipline=discipline)

    # üîß –î–æ—Å—Ç–∞—ë–º —Å—Ç–∞—Ç—É—Å –∏ —Ç–∞—Ä–∏—Ñ
    row = await get_user_row_by_id(message.from_user.id)
    status = row.get("status", "").split()[-1]
    plan = row.get("plan", "").strip().lower()

    # ‚è≠ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProgramSelection.asking)

    # ‚å®Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ <b>{discipline}</b> –≤—ã–±—Ä–∞–Ω–∞.\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ!",
        reply_markup=get_consultant_keyboard(user_status=status, plan=plan)
    )

@router.message(ProgramSelection.asking)
async def handle_question(message: Message, state: FSMContext):
    if message.text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        await message.answer("üì∏ –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–º, –∏ —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é.")
        return
    
    if message.text == "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        await state.set_state(ProgramSelection.waiting_for_dalle_prompt)
        await message.answer("üé® –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:")
        return

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã":
        data = await state.get_data()
        program = data.get("program")
        module = data.get("module")
        disciplines = await get_disciplines_by_module(program, module)
        await state.set_state(ProgramSelection.discipline)
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=get_discipline_keyboard(disciplines))
        return

    if message.text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω", reply_markup=get_shop_keyboard())
        return


    user = message.from_user
    text = message.text
    if not text or text.strip() in ["üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", ""]:
        return
    text = text.strip()


    data = await state.get_data()
    row = await get_user_row_by_id(user.id)

    if not row:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    plan = row.get("plan")
    free_q = int(row.get("free_questions", 0))
    paid_q = int(row.get("paid_questions", 0))

    if plan not in ("lite", "pro") and free_q + paid_q <= 0:
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã. –ö—É–ø–∏ –ø–∞–∫–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ üõí –ú–∞–≥–∞–∑–∏–Ω.")
        return

    program = data.get("program")
    module = data.get("module")
    discipline = data.get("discipline")

    if not all([program, module, discipline]):
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        keywords = await get_keywords_for_discipline(program, module, discipline)
    except Exception as e:
        print(f"[KEYWORDS ERROR] {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    if not keywords or not any(kw.lower() in text.lower() for kw in keywords):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ. –í –Ω—ë–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
        return

    await message.answer("‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

    try:
        answer = await generate_answer(program, module, discipline, text)
    except Exception as e:
        print(f"[GPT ERROR] {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")
        return

    if not answer:
        await message.answer("‚ö†Ô∏è –ò–ò –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.")
        return

    status = re.sub(r"[^\w\s]", "", row.get("status", "–ù–æ–≤–∏—á–æ–∫")).strip()
    plan = row.get("plan", "").strip().lower()
    videos_to_send = VIDEO_URLS.get(status, 0)
    if plan in VIDEO_URLS:
        videos_to_send = max(videos_to_send, VIDEO_URLS[plan])

    if videos_to_send > 0:
        try:
            video_urls = await search_video_on_youtube(f"{discipline} {text}", max_results=videos_to_send)
            for url in video_urls:
                if url.strip():
                    try:
                        await message.answer(f"üé¨ –í–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ:\n{url}")
                        await asyncio.sleep(1.5)
                    except Exception as e:
                        print(f"[VIDEO ERROR] {e}")
                else:
                    print("[VIDEO WARNING] –ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        except Exception as e:
            print(f"[VIDEO ERROR] {e}")

    header = f"üìö *–û—Ç–≤–µ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {discipline}*:\n\n"
    stats = (
        f"üß† –¢–≤–æ–π XP: {row.get('xp')} | –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üéÅ –û—Å—Ç–∞–ª–æ—Å—å: üé´ {row.get('free_questions', 0)} | üí∞ {row.get('paid_questions', 0)}"
    )

    try:
        await message.answer(f"{header}{answer}\n\n{stats}", parse_mode="Markdown")
    except Exception as e:
        print(f"[MESSAGE ERROR] {e}")
        await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")

    await log_question_answer(user.id, program, discipline, text, answer)
    await update_user_after_answer(message.from_user.id, bot=message.bot)

    updates = {
        "last_interaction": datetime.now(pytz.timezone("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
    }
    await update_sheet_row(row.sheet_id, row.sheet_name, row.index, updates)

    rewards = await check_and_apply_missions(user.id)
    for r in rewards:
        await message.answer(r)


@router.message(ProgramSelection.asking, F.text == "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def prompt_dalle(message: Message, state: FSMContext):
    await state.set_state(ProgramSelection.waiting_for_dalle_prompt)
    await message.answer("üé® –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:")

@router.message(ProgramSelection.waiting_for_dalle_prompt)
async def dalle_generate(message: Message, state: FSMContext):
    user_id = message.from_user.id
    prompt = message.text

    # 1Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —Å–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–∞—á–∞–ª–∞
    success = await decrease_question_limit(user_id)
    if not success:
        await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –ª–∏–º–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ üõí –ú–∞–≥–∞–∑–∏–Ω.")
        await state.set_state(ProgramSelection.asking)
        return

    await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DALL¬∑E...")

    try:
        # 2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        response = await client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024",
            response_format="url"
        )
        image_url = response.data[0].url
        await message.answer_photo(photo=image_url, caption="–ì–æ—Ç–æ–≤–æ! ‚ú®")

        # 3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º XP –∏ —Å—Ç–∞—Ç—É—Å
        await update_user_after_answer(user_id, bot=message.bot)

        # 4Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        await log_image_request(user_id, prompt, "—É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        print(f"[DALLE ERROR] {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")

        # ‚ùå –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        await log_image_request(user_id, prompt, "–æ—à–∏–±–∫–∞")

    finally:
        await state.set_state(ProgramSelection.asking)


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è —Å –ò–ò (FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@router.message(ProgramSelection.asking, F.photo)
async def handle_photo_with_test(message: Message, state: FSMContext):
    print("[DEBUG] handle_photo_with_test called ‚úÖ")

    user_id = message.from_user.id
    row = await get_user_row_by_id(user_id)
    if not row:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    plan = row.get("plan", "").lower()
    status = row.get("status", "")
    status_clean = status.split()[-1]

    if plan != "pro" and status_clean not in ["–≠–∫—Å–ø–µ—Ä—Ç", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–õ–µ–≥–µ–Ω–¥–∞", "–°–æ–∑–¥–∞—Ç–µ–ª—å"]:
        await message.answer("üõë –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≠–∫—Å–ø–µ—Ä—Ç+ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–æ–π –ü—Ä–æ.")
        return

    success = await decrease_question_limit(user_id)
    if not success:
        await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –ª–∏–º–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ üõí –ú–∞–≥–∞–∑–∏–Ω.")
        return

    await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Google Vision...")
    print("[DEBUG] –ø–µ—Ä–µ–¥ extract_text_from_image")

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    image_data = await message.bot.download_file(file.file_path)

    try:
        text = extract_text_from_image(image_data)
    except Exception as e:
        print(f"[Vision API ERROR] {e}")
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    print(f"[DEBUG] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
    
    now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_name = f"photo_{user_id}_{now}.png"

    upload_image_to_drive(
        file_name,
        BytesIO(image_data),
        folder_id=PHOTO_ARCHIVE_FOLDER_ID
    )

    print("[DEBUG] –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤ Google –î–∏—Å–∫–∞ ‚úÖ")

    if not text.strip():
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å —á—ë—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.")
        return

    await message.answer(f"üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<pre>{text}</pre>", parse_mode="HTML")

    try:
        answer = await generate_answer("–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑", "–¢–µ—Å—Ç", "–§–æ—Ç–æ–∑–∞–ø—Ä–æ—Å", text)
        await message.answer(f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò:\n\n{answer}")

        # –û–±–Ω–æ–≤–ª—è–µ–º XP, —Å—Ç–∞—Ç—É—Å –∏ –º–∏—Å—Å–∏–∏
        await update_user_after_answer(user_id, bot=message.bot)
        await log_photo_request(user_id, text, answer)

    except Exception as e:
        print(f"[GPT ERROR] {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    # üîÅ –í–µ—Ä–Ω—ë–º—Å—è –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò
    await state.set_state(ProgramSelection.asking)

# ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–ª–æ–Ω—è–µ–º)
@router.message(F.photo)
async def reject_photo_outside_context(message: Message, state: FSMContext):
    current = await state.get_state()
    print(f"[DEBUG FSM STATE] current: {current}")
    if current != ProgramSelection.asking:
        await message.answer("üì∏ –§–æ—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –º–µ–Ω—é –æ–±—â–µ–Ω–∏—è —Å –ò–ò –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.")

@router.message(F.text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
async def reject_photo_button_outside_context(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != ProgramSelection.asking:
        await message.answer("üì∏ –§–æ—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –º–µ–Ω—é –æ–±—â–µ–Ω–∏—è —Å –ò–ò –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.")

@router.message(F.text == "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def reject_dalle_outside_context(message: Message, state: FSMContext):
    current = await state.get_state()
    if current != ProgramSelection.asking:
        await message.answer("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –º–µ–Ω—é –æ–±—â–µ–Ω–∏—è —Å –ò–ò.")
