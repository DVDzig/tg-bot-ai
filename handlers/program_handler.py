from aiogram import Router, F
from aiogram.types import (
    Message, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InputMediaVideo,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from states.program_states import ProgramSelection
from services.google_sheets_service import (
    get_modules_by_program, 
    get_disciplines_by_module,
    get_keywords_for_discipline, 
    log_question_answer
)
from services.gpt_service import generate_answer
from services.user_service import (
    get_user_row_by_id, 
    increase_question_count, 
    decrease_question_limit,
    increase_question_count,
    decrease_question_limit,
    add_xp_and_update_status
)
   
from services.missions_service import check_and_apply_missions
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.utils import get_back_keyboard
from services.gpt_service import search_video_on_youtube

router = Router()

@router.message(F.text == "üí¨ –í—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã")
async def start_program_selection(message: Message, state: FSMContext):
    await state.clear()
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéì –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç")],
            [KeyboardButton(text="üéì –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await state.set_state(ProgramSelection.level)

@router.message(ProgramSelection.level)
async def select_program(message: Message, state: FSMContext):
    level = message.text
    await state.update_data(level=level)

    if "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" in level:
        programs = ["üìò –ú–†–ö", "üìó –¢–ü–†", "üìô –ë–•"]
    elif "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞" in level:
        programs = ["üìï –ú–°–°", "üìì –°–ê", "üìî –§–í–ú"]
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=p)] for p in programs],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)
    await message.answer("‚¨ÖÔ∏è –ù–∞–∑–∞–¥:", reply_markup=get_back_keyboard("level"))
    await state.set_state(ProgramSelection.program)

@router.message(ProgramSelection.program)
async def select_module(message: Message, state: FSMContext):
    program = message.text.replace("üìò ", "").replace("üìó ", "").replace("üìô ", "").replace("üìï ", "").replace("üìí ", "").replace("üìì ", "").replace("üìî ", "")
    await state.update_data(program=program)

    modules = await get_modules_by_program(program)
    if not modules:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª–∏ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=mod)] for mod in modules],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:", reply_markup=kb)
    await message.answer("‚¨ÖÔ∏è –ù–∞–∑–∞–¥:", reply_markup=get_back_keyboard("program"))
    await state.set_state(ProgramSelection.module)

@router.message(ProgramSelection.module)
async def select_discipline(message: Message, state: FSMContext):
    module = message.text
    await state.update_data(module=module)

    data = await state.get_data()
    program = data.get("program")

    disciplines = await get_disciplines_by_module(program, module)
    if not disciplines:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è.")
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=disc)] for disc in disciplines],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=kb)
    await message.answer("‚¨ÖÔ∏è –ù–∞–∑–∞–¥:", reply_markup=get_back_keyboard("module"))
    await state.set_state(ProgramSelection.discipline)

@router.message(ProgramSelection.discipline)
async def start_asking(message: Message, state: FSMContext):
    discipline = message.text
    await state.update_data(discipline=discipline)

    await message.answer(
        f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ <b>{discipline}</b> –≤—ã–±—Ä–∞–Ω–∞.\n\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ!",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ProgramSelection.asking)

@router.message(ProgramSelection.asking)
async def handle_user_question(message: Message, state: FSMContext):
    user = message.from_user
    text = message.text.strip()
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    row = await get_user_row_by_id(user.id)
    if not row:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ / –ª–∏–º–∏—Ç–æ–≤
    plan = row.get("plan")
    free_q = int(row.get("free_questions", 0))
    paid_q = int(row.get("paid_questions", 0))
    if plan not in ("lite", "pro") and free_q + paid_q <= 0:
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã. –ö—É–ø–∏ –ø–∞–∫–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ üõí –ú–∞–≥–∞–∑–∏–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    keywords = await get_keywords_for_discipline(
        program=data.get("program"),
        module=data.get("module"),
        discipline=data.get("discipline")
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–µ
    if not any(kw.lower() in text.lower() for kw in keywords):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ. –í –Ω—ë–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
    
    is_valid = any(kw.lower() in text.lower() for kw in keywords)    
    if is_valid:
        await log_question_answer(user.id, data.get("program"), data.get("discipline"), text, answer)
        await increase_question_count(user.id)
        await decrease_question_limit(user.id)
        await add_xp_and_update_status(user.id)
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    answer = await generate_answer(
        program=data.get("program"),
        module=data.get("module"),
        discipline=data.get("discipline"),
        user_question=text
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
    status = row.get("status", "–ù–æ–≤–∏—á–æ–∫")
    videos_to_send = 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status == "–ü—Ä–æ—Ñ–∏":
        videos_to_send = 1
    elif status == "–≠–∫—Å–ø–µ—Ä—Ç":
        videos_to_send = 2
    elif status in ("–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–õ–µ–≥–µ–Ω–¥–∞", "–°–æ–∑–¥–∞—Ç–µ–ª—å"):
        videos_to_send = 3
    elif plan in ("lite", "pro"):
        videos_to_send = 3  # –õ–∞–π—Ç –∏ –ü—Ä–æ –≤—Å–µ–≥–¥–∞ 3 –≤–∏–¥–µ–æ

    # –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ YouTube API
    if videos_to_send > 0:
        video_urls = await search_video_on_youtube(f"{data['discipline']} {text}", max_results=videos_to_send)
        for video_url in video_urls:
            await message.answer_video(video_url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await message.answer(answer)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await log_question_answer(user.id, data.get("program"), data.get("discipline"), text, answer)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤
    await increase_question_count(user.id)
    if plan not in ("lite", "pro"):
        await decrease_question_limit(user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏—Å—Å–∏–π
    rewards = await check_and_apply_missions(user.id)
    for r in rewards:
        await message.answer(r)

    await message.answer("‚¨ÖÔ∏è –ù–∞–∑–∞–¥:", reply_markup=get_back_keyboard("context"))
