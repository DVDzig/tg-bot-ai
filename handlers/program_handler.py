from aiogram import Router, types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.keyboard import (
    get_programs_keyboard,
    get_modules_keyboard,
    get_disciplines_keyboard,
    get_question_keyboard,
    get_main_keyboard,
    get_levels_keyboard,
    get_bachelor_programs_keyboard,
    get_master_programs_keyboard
)
from services.google_sheets_service import (
    get_modules, get_disciplines, log_user_activity,
    get_keywords_for_discipline, find_similar_questions,
    save_question_answer
)
from services.youtube_search import search_youtube_videos
import logging
from config import OPENAI_API_KEY
from services.gpt_service import generate_ai_response
from functools import lru_cache

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from services.qa_keywords_updater import update_keywords_from_qa
from services.user_service import (
    get_user_profile, get_or_create_user,
    can_ask_question, update_user_xp,
    determine_status, decrement_question_balance,
    check_and_apply_daily_challenge
)

router = Router()

BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ProgramStates(StatesGroup):
    choosing_level = State()
    choosing_program = State()
    choosing_module = State()
    choosing_discipline = State()
    asking_question = State()
    
# –ö—ç—à–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
@lru_cache(maxsize=512)
def cached_get_keywords(module, discipline):
    return get_keywords_for_discipline(module, discipline)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(lambda msg: msg.text == BACK_BUTTON)
async def universal_back_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()

    if current_state == ProgramStates.asking_question.state:
        await state.set_state(ProgramStates.choosing_discipline)
        markup = get_disciplines_keyboard(data.get("module"))
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:", reply_markup=markup)

    elif current_state == ProgramStates.choosing_discipline.state:
        await state.set_state(ProgramStates.choosing_module)
        markup = get_modules_keyboard(data.get("program"))
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥—É–ª—è:", reply_markup=markup)

    elif current_state == ProgramStates.choosing_module.state:
        await state.set_state(ProgramStates.choosing_program)
        level = data.get("level")
        markup = get_bachelor_programs_keyboard() if level == "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" else get_master_programs_keyboard()
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã:", reply_markup=markup)

    elif current_state == ProgramStates.choosing_program.state:
        await state.set_state(ProgramStates.choosing_level)
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=get_levels_keyboard())

    elif current_state == ProgramStates.choosing_level.state:
        await state.clear()
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

    else:
        await state.clear()
        await message.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
@router.message(lambda msg: msg.text == "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
async def restart_bot(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(ProgramStates.choosing_level)
    await message.answer("üîÅ –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞! –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=get_levels_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"
@router.message(lambda message: message.text == "üéì –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def choose_level_handler(message: Message, state: FSMContext):
    await state.set_state(ProgramStates.choosing_level)
    await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=get_levels_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞ –∏–ª–∏ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
@router.message(ProgramStates.choosing_level)
async def level_selected(message: Message, state: FSMContext):
    level = message.text.replace("üéì ", "")
    await state.update_data(level=level)
    await state.set_state(ProgramStates.choosing_program)

    if level == "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç":
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞:", reply_markup=get_bachelor_programs_keyboard())
    elif level == "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞":
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã:", reply_markup=get_master_programs_keyboard())
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=get_levels_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
@router.message(ProgramStates.choosing_program)
async def choose_module_handler(message: Message, state: FSMContext):
    selected_program = message.text.replace("üìò ", "").replace("üìó ", "").replace("üìô ", "").replace("üìï ", "").replace("üìí ", "")
    level_data = await state.get_data()
    level = level_data.get("level")

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ø–æ —É—Ä–æ–≤–Ω—é
    if level == "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç":
        valid_programs = ["–ú–†–ö", "–¢–ü–†", "–ë–•"]
    elif level == "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞":
        valid_programs = ["–ú–°–°", "–§–í–ú", "–°–ê"]
    else:
        await message.answer("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –í–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏ —Å–Ω–æ–≤–∞.")
        return

    if selected_program not in valid_programs:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    await state.update_data(program=selected_program)
    modules = get_modules(selected_program)
    logging.debug(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {modules}")
    if not modules:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        return

    await state.set_state(ProgramStates.choosing_module)
    is_admin = message.from_user.id == 150532949
    markup = get_modules_keyboard(selected_program, is_admin=is_admin)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
@router.message(ProgramStates.choosing_module)
async def choose_discipline_handler(message: Message, state: FSMContext):
    if message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞":
        if message.from_user.id != 150532949:
            await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –≤—Å–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º...")
        update_keywords_from_qa()
        await message.answer("‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        return

    data = await state.get_data()
    current_program = data.get("program")
    modules = get_modules(current_program)

    selected_module = message.text.replace("üìó ", "")
    if selected_module not in modules:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    await state.update_data(module=selected_module)
    disciplines = get_disciplines(selected_module)
    if not disciplines:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è.")
        return

    await state.set_state(ProgramStates.choosing_discipline)
    markup = get_disciplines_keyboard(selected_module)
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
@router.message(ProgramStates.choosing_discipline)
async def choose_discipline_complete(message: Message, state: FSMContext):
    selected_discipline = message.text.replace("üìï ", "")
    data = await state.get_data()
    module = data.get("module")
    available_disciplines = get_disciplines(module)

    if selected_discipline not in available_disciplines:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    await state.update_data(discipline=selected_discipline)

    log_user_activity(
        user_id=message.from_user.id,
        plan=data.get("program"),
        module=module,
        discipline=selected_discipline
    )

    await state.set_state(ProgramStates.asking_question)
    markup = get_question_keyboard(is_admin=(message.from_user.id == 150532949))
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É: <b>{selected_discipline}</b>\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ–º–æ–≥—É!",
        parse_mode="HTML",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ asking_question
@router.message(ProgramStates.asking_question)
async def handle_question(message: Message, state: FSMContext):
    if message.text == "üí∞ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã":
        await state.clear()
        await message.answer(
            "üí∏ <b>–ü–æ–∫—É–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤</b>\n\n"
            "–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å!\n"
            "–ê –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–º, –∏ –º—ã –ø–æ–º–æ–∂–µ–º –ª–∏—á–Ω–æ üòâ",
            parse_mode="HTML"
        )
        return

    if message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await state.clear()
        profile = get_user_profile(message.from_user.id)
        await message.answer(
            f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>:\n"
            f"–ò–º—è: {profile['first_name'] or '@' + profile['username']}"
            f"–°—Ç–∞—Ç—É—Å: {profile['status']}\n"
            f"XP: {profile['xp']}\n"
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {profile['free_questions']}\n"
            f"–ü–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {profile['paid_questions']}",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return

    if message.text in ["üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥", "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"]:
        return

    logging.debug(f"[DEBUG] –í–æ—à–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞. –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

    user_id = message.from_user.id
    if not can_ask_question(user_id):
        await message.answer(
            "‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã!\n"
            "–¢—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ü§ñ",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return

    data = await state.get_data()

    discipline = data.get("discipline")
    program = data.get("program")
    module = data.get("module")
    question = message.text

    keywords = cached_get_keywords(module, discipline)
    print(f"[DEBUG] Keywords: {keywords}")
    print(f"[DEBUG] User question: {question}")
    history = find_similar_questions(discipline, keywords or "")

    if not keywords or not any(kw.strip().lower() in question.lower() for kw in keywords.split(",") if kw.strip()):
        await message.answer(
            "‚ùå –ü–æ—Ö–æ–∂–µ, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ.",
            reply_markup=get_question_keyboard(is_admin=(user_id == 150532949))
        )
        return

    if not decrement_question_balance(user_id):
        await message.answer(
            "‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã!\n"
            "–ö—É–ø–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return

    ai_response = generate_ai_response(question, keywords, history)

    save_question_answer(user_id, program, module, discipline, question, ai_response)

    new_xp, new_status = update_user_xp(user_id)
    profile = get_user_profile(user_id)
    free_q = profile["free_questions"]

    # –ó–∞–º–µ–Ω—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
    profile = get_user_profile(user_id)
    free_q = profile["free_questions"]
    status = profile["status"]

    # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    status, _ = determine_status(new_xp)
    thresholds = {
        "–Ω–æ–≤–∏—á–æ–∫": (0, 10),
        "–æ–ø—ã—Ç–Ω—ã–π": (11, 50),
        "–ø—Ä–æ—Ñ–∏": (51, 100),
        "—ç–∫—Å–ø–µ—Ä—Ç": (101, 150)
    }
    min_xp, max_xp = thresholds.get(status, (0, 10))
    progress = int(((new_xp - min_xp) / (max_xp - min_xp)) * 100) if max_xp > min_xp else 100
    progress_bar = "üü©" * min(5, int(progress / 1)) + "‚¨úÔ∏è" * (5 - min(5, int(progress / 1)))

    reply = (
        f"üìö <b>–û—Ç–≤–µ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ</b> <i>{discipline}</i>:\n\n"
        f"{ai_response}\n\n"
        f"üéØ –¢–≤–æ–π XP: {new_xp} | –°—Ç–∞—Ç—É—Å: {status} (–ø—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%)\n"
        f"üÜì –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {free_q}"
    )

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
    if check_and_apply_daily_challenge(user_id):
        reply += "\n\nüèÜ –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏ –ø–æ–ª—É—á–∏–ª +2 XP!"

    # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
    if status in ["–ø—Ä–æ—Ñ–∏", "—ç–∫—Å–ø–µ—Ä—Ç"]:
        count = 3 if status == "—ç–∫—Å–ø–µ—Ä—Ç" else 1
        videos = search_youtube_videos(question, max_results=count)
        if videos:
            reply += "\n\nüé• <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∏–¥–µ–æ:</b>\n"
            for link in videos:
                reply += f"{link}\n"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω—É–∂–Ω–æ –¥–ª—è reply_markup)
    is_admin = user_id == 150532949

    await message.answer(reply, parse_mode="HTML", reply_markup=get_question_keyboard(is_admin=is_admin))

# –ó–∞–ø—Ä–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –≤–Ω–µ –æ–±—â–µ–Ω–∏—è —Å –ò–ò
@router.message()
async def block_input(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != ProgramStates.asking_question.state:
        await message.delete()
        await message.answer("‚ùó–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

from aiogram.exceptions import SkipHandler

@router.message()
async def block_input(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != ProgramStates.asking_question.state:
        await message.delete()
        await message.answer("‚ùó–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        raise SkipHandler  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
