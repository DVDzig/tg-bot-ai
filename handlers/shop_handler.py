from aiogram import Router, F
from aiogram.types import Message
from services.payment_service import log_pending_payment
from services.yookassa_service import create_yookassa_payment
from keyboards.shop import (
    get_question_packages_keyboard,
    get_subscription_packages_keyboard
)
from aiogram.fsm.context import FSMContext
from utils.context_stack import push_step

router = Router()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
async def send_payment_link(message: Message, amount: int, description: str, payment_type: str, quantity: int):
    user_id = message.from_user.id

    try:
        payment_link, internal_id = await create_yookassa_payment(
            user_id=user_id,
            amount=amount,
            description=description,
            payment_type=payment_type,
            quantity=quantity
        )

        await log_pending_payment(user_id, internal_id, quantity, payment_type)

        await message.answer(
            f"üßæ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
            f"{description} –∑–∞ {amount}‚ÇΩ.\n"
            f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n\n"
            f"<a href='{payment_link}'>üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa</a>",
            disable_web_page_preview=True
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n<code>{str(e)}</code>")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üßæ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã"
@router.message(F.text == "üßæ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
async def show_question_packages(message: Message, state: FSMContext):
    await push_step(state, "shop")
    await message.answer(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤:</b>",
        reply_markup=get_question_packages_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîì –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@router.message(F.text == "üîì –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def show_subscription_packages(message: Message, state: FSMContext):
    await push_step(state, "shop")
    await message.answer(
        "üîì <b>–õ–∞–π—Ç ‚Äî 149‚ÇΩ</b>\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 7 –¥–Ω–µ–π\n"
        "‚Ä¢ XP –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è\n"
        "‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—Ç–≤–µ—Ç–∞—Ö\n\n"
        "üîê <b>–ü—Ä–æ ‚Äî 499‚ÇΩ</b>\n"
        "‚Ä¢ –í—Å—ë –∏–∑ –õ–∞–π—Ç\n"
        "‚Ä¢ +100 –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –î–æ 3 –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n\n"
        "üíº <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:</b>",
        reply_markup=get_subscription_packages_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ

@router.message(F.text == "üîì –õ–∞–π—Ç / 7 –¥–Ω–µ–π")
async def buy_light_subscription(message: Message):
    await send_payment_link(
        message,
        amount=149,
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π",
        payment_type="subscription",
        quantity=7
    )

@router.message(F.text == "üîì –ü—Ä–æ / 30 –¥–Ω–µ–π")
async def buy_pro_subscription(message: Message):
    await send_payment_link(
        message,
        amount=299,
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ –Ω–∞ 30 –¥–Ω–µ–π",
        payment_type="subscription",
        quantity=30
    )

@router.message(F.text == "üßæ 1 –≤–æ–ø—Ä–æ—Å ‚Äî 10‚ÇΩ")
async def buy_1_question(message: Message):
    await send_payment_link(
        message,
        amount=10,
        description="–ü–æ–∫—É–ø–∫–∞ 1 –≤–æ–ø—Ä–æ—Å–∞",
        payment_type="questions",
        quantity=1
    )

@router.message(F.text == "üßæ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 90‚ÇΩ")
async def buy_10_questions(message: Message):
    await send_payment_link(
        message,
        amount=90,
        description="–ü–æ–∫—É–ø–∫–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤",
        payment_type="questions",
        quantity=10
    )

@router.message(F.text == "üßæ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 450‚ÇΩ")
async def buy_50_questions(message: Message):
    await send_payment_link(
        message,
        amount=450,
        description="–ü–æ–∫—É–ø–∫–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤",
        payment_type="questions",
        quantity=50
    )

@router.message(F.text == "üßæ 100 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 900‚ÇΩ")
async def buy_100_questions(message: Message):
    await send_payment_link(
        message,
        amount=900,
        description="–ü–æ–∫—É–ø–∫–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤",
        payment_type="questions",
        quantity=100
    )

