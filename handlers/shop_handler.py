from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from handlers.shop_subscription_handler import generate_payment_link

router = Router()

# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
@router.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def open_shop(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="üßæ –í–æ–ø—Ä–æ—Å—ã", callback_data="shop_questions")
    builder.button(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="shop_subscription")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")
    builder.adjust(1)

    await message.answer(
        "üõç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–≥–∞–∑–∏–Ω</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –±–æ–Ω—É—Å–∞–º–∏ –∏ –±–µ–∑–ª–∏–º–∏—Ç–æ–º\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ üëá",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–æ–ø—Ä–æ—Å—ã"
@router.callback_query(F.data == "shop_questions")
async def handle_shop_questions(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –ö—É–ø–∏—Ç—å 1 –≤–æ–ø—Ä–æ—Å - 10‚ÇΩ", callback_data="purchase_1_question")
    builder.button(text="üí≥ –ö—É–ø–∏—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤ - 90‚ÇΩ", callback_data="purchase_10_questions")
    builder.button(text="üí≥ –ö—É–ø–∏—Ç—å 50 –≤–æ–ø—Ä–æ—Å–æ–≤ - 450‚ÇΩ", callback_data="purchase_50_questions")
    builder.button(text="üí≥ –ö—É–ø–∏—Ç—å 100 –≤–æ–ø—Ä–æ—Å–æ–≤ - 900‚ÇΩ", callback_data="purchase_100_questions")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:shop")
    builder.adjust(1)

    await call.message.edit_text(
        "üßæ <b>–í—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ üëá",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∫–∞"
@router.callback_query(F.data == "shop_subscription")
async def handle_shop_subscription(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç (7 –¥–Ω–µ–π) - 149‚ÇΩ", callback_data="purchase_light_subscription")
    builder.button(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ - 299‚ÇΩ", callback_data="purchase_pro_subscription")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:shop")
    builder.adjust(1)

    await call.message.edit_text(
        "üí≥ <b>–í—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å:\n"
        "‚Ä¢ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π\n"
        "‚Ä¢ –ü—Ä–æ –Ω–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ üëá",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

@router.callback_query(F.data == "purchase_1_question")
async def handle_single_question_purchase(call: CallbackQuery):
    user_id = call.from_user.id
    amount = 10
    description = "–ü–æ–∫—É–ø–∫–∞ 1 –≤–æ–ø—Ä–æ—Å–∞"
    
    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await call.message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 1 –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

@router.callback_query(F.data == "purchase_10_questions")
async def handle_ten_questions_purchase(call: CallbackQuery):
    user_id = call.from_user.id
    amount = 90
    description = "–ü–æ–∫—É–ø–∫–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤"
    
    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await call.message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

@router.callback_query(F.data == "purchase_50_questions")
async def handle_fifty_questions_purchase(call: CallbackQuery):
    user_id = call.from_user.id
    amount = 450
    description = "–ü–æ–∫—É–ø–∫–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤"
    
    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await call.message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

@router.callback_query(F.data == "purchase_100_questions")
async def handle_hundred_questions_purchase(call: CallbackQuery):
    user_id = call.from_user.id
    amount = 900
    description = "–ü–æ–∫—É–ø–∫–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤"
    
    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await call.message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–õ–∞–π—Ç) ‚Äî —Ç–µ–ø–µ—Ä—å –Ω–∞ 7 –¥–Ω–µ–π
@router.callback_query(F.data == "purchase_light_subscription")
async def handle_light_subscription_payment(call: CallbackQuery):
    user_id = call.from_user.id
    amount = 149  # –ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π"
    
    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await call.message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –õ–∞–π—Ç –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–ü—Ä–æ) ‚Äî —Ç–µ–ø–µ—Ä—å –Ω–∞ 30 –¥–Ω–µ–π
@router.callback_query(F.data == "purchase_pro_subscription")
async def handle_pro_subscription_payment(call: CallbackQuery):
    user_id = call.from_user.id
    amount = 299  # –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ –Ω–∞ 30 –¥–Ω–µ–π
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ –Ω–∞ 30 –¥–Ω–µ–π"  # –ò–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    
    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await call.message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ü—Ä–æ (30 –¥–Ω–µ–π) –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")
