from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.keyboard import get_main_keyboard
from services.user_service import (
    apply_xp_penalty_if_needed,
    get_user_activity_stats,
    determine_status,
    get_user_profile, 
    get_or_create_user
)
from services.google_sheets_service import get_leaderboard, get_sheet_data
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.markdown import hlink
from services.yookassa_service import create_payment
from config import USER_SHEET_ID
from services.missions import get_all_missions
from datetime import datetime

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command("start"))
async def start_handler(message: types.Message):
    user = message.from_user
    get_or_create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code,
        is_premium=getattr(user, "is_premium", False)
    )
    apply_xp_penalty_if_needed(user.id)

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç üëã\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ–º–æ–≥–∞—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —É—á–µ–±–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö, –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –≤–º–µ—Å—Ç–µ —Å –ò–ò.\n\n"
        "üß† –û—Ç–≤–µ—á–∞—é —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ ‚Äî –µ—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç.\n\n"
        "üéØ –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ XP (–µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏), –∞ XP –ø–æ–≤—ã—à–∞–µ—Ç —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã, –º–∏—Å—Å–∏–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã.\n"
        "üìä –°–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª, –≤—ã–ø–æ–ª–Ω—è–π –º–∏—Å—Å–∏–∏, –ø–æ–ª—É—á–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–µ–π–¥–∂–∏.\n\n"
        "üí° –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è? –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n"
        "üé• –í —Å—Ç–∞—Ç—É—Å–µ –ü—Ä–æ –∏–ª–∏ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ –∏ –¥—Ä—É–≥–∏–º –±–æ–Ω—É—Å–∞–º.\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ ‚§µÔ∏è"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

async def go_to_start_screen(message: types.Message):
    text = (
        "üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–æ—Ç–æ–≤–æ!\n\n"
        "‚ùì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏ –ø–æ–ª—É—á–∞–π XP\n"
        "üéØ –í—ã–ø–æ–ª–Ω—è–π –º–∏—Å—Å–∏–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ, –Ω–µ–¥–µ–ª—å–Ω—ã–µ, —Å—Ç—Ä–∏–∫–∏) ‚Äî –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã\n"
        "üèÜ –ü–æ–≤—ã—à–∞–π —Å—Ç–∞—Ç—É—Å, –æ—Ç–∫—Ä—ã–≤–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–æ–±–∏—Ä–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "üí≥ –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ö—É–ø–∏ –ø–∞–∫–µ—Ç –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É\n"
        "üé• –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ ‚Äî —ç—Ç–æ +100 –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–∏–¥–µ–æ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚§µÔ∏è"
    )
    await message.answer(text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@router.message(lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    profile_data = get_user_profile(user_id)
    stats = get_user_activity_stats(user_id)
    payment_log = get_sheet_data(USER_SHEET_ID, "PaymentsLog!A2:G")
    last_payment = None
    for row in reversed(payment_log):
        if row[0] == str(user_id) and row[4] == "payment.succeeded":
            last_payment = row
            break

    if last_payment:
        q_count = last_payment[2]
        price = last_payment[1]
        date = last_payment[6]
        last_purchase_text = f"\nüßæ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞:</b>\n‚Ä¢ {q_count} –≤–æ–ø—Ä–æ—Å(–æ–≤), {price}‚ÇΩ\n‚Ä¢ {date}"
    else:
        last_purchase_text = ""

    current_xp = profile_data['xp']
    new_status, _ = determine_status(current_xp)

    thresholds = {
        "–Ω–æ–≤–∏—á–æ–∫": (0, 10),
        "–æ–ø—ã—Ç–Ω—ã–π": (11, 50),
        "–ø—Ä–æ—Ñ–∏": (51, 100),
        "—ç–∫—Å–ø–µ—Ä—Ç": (101, 150)
    }
    min_xp, max_xp = thresholds.get(new_status, (0, 10))
    if current_xp >= max_xp:
        progress = 100
    else:
        progress = int(((current_xp - min_xp) / (max_xp - min_xp)) * 100)
    bar_blocks = min(5, int(progress / 5))
    progress_bar = "üü©" * bar_blocks + "‚¨úÔ∏è" * (5 - bar_blocks)

    daily_goal = 3
    challenge_text = (
        f"üî• –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –∑–∞–¥–∞–ª {stats['today']} –∏–∑ {daily_goal} –≤–æ–ø—Ä–æ—Å–æ–≤!"
        if stats['today'] < daily_goal
        else "üèÜ –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!"
    )
    # –û–ø—Ä–µ–¥–µ–ª–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Å—Ç–∞—Ç—É—Å –∏ —Å–∫–æ–ª—å–∫–æ XP –¥–æ –Ω–µ–≥–æ
    next_status_info = {
        "–Ω–æ–≤–∏—á–æ–∫": ("–æ–ø—ã—Ç–Ω—ã–π", 11),
        "–æ–ø—ã—Ç–Ω—ã–π": ("–ø—Ä–æ—Ñ–∏", 51),
        "–ø—Ä–æ—Ñ–∏": ("—ç–∫—Å–ø–µ—Ä—Ç", 101),
        "—ç–∫—Å–ø–µ—Ä—Ç": ("—ç–∫—Å–ø–µ—Ä—Ç", 9999)
    }
    next_status, xp_target = next_status_info.get(new_status, ("–æ–ø—ã—Ç–Ω—ã–π", 11))
    xp_left = max(0, xp_target - current_xp)

    profile_text = (
        f"üë§ <b>–ò–º—è:</b> {profile_data['first_name']}\n"
        f"üéñÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {new_status.capitalize()} ‚Äî {progress_bar} {progress}%\n"
        f"‚≠ê <b>–¢–≤–æ–π XP:</b> {current_xp} XP\n"
        f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> {profile_data['last_interaction']}\n\n"

        f"üéÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: {profile_data['free_questions']}\n"
        f"‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ: {profile_data['paid_questions']}\n"

        f"{last_purchase_text}\n\n"

        f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['today']} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n"
        f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['week']} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total']} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n\n"

        f"{challenge_text}\n\n"
        + (
            f"üí° <i>–ë–ª–∏–∂–∞–π—à–∏–π —Å—Ç–∞—Ç—É—Å:</i> {next_status} (–µ—â—ë {xp_left} XP)\n"
            if new_status != "—ç–∫—Å–ø–µ—Ä—Ç"
            else "üéì –¢—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üèÜ\n"
        )
        + (
            f"\nüíé <b>–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø:</b> {profile_data['premium_status'].capitalize()} "
            f"(–¥–æ {profile_data.get('premium_until', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})"
            if profile_data.get("premium_status") in ("light", "pro")
            else ""
        )
    )

    # –î–æ–±–∞–≤–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫—É–ø–∏—Ç—å –õ–∞–π—Ç –∏–ª–∏ –ü—Ä–æ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if profile_data.get("premium_status") in (None, "", "none"):
        profile_text += (
            "\n\nüîì <b>–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π?</b>\n\n"
            "‚Ä¢ <b>–õ–∞–π—Ç</b> ‚Äî –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 7 –¥–Ω–µ–π\n"
            "‚Ä¢ <b>–ü—Ä–æ</b> ‚Äî 100 –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–∏–¥–µ–æ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ü§ñ\n\n"
            "üëâ –î–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª</b>"
        )

    await message.answer(profile_text, parse_mode="HTML", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥"
@router.message(lambda msg: msg.text == "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
async def leaderboard_handler(message: types.Message):
    leaderboard = get_leaderboard(top_n=100)  # –ü–æ–ª—É—á–∏–º —Å—Ä–∞–∑—É 100, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not leaderboard:
        await message.answer("üèÜ –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.")
        return

    user_id = str(message.from_user.id)
    user_profile = get_user_profile(int(user_id))
    current_xp = user_profile['xp']
    user_place = None

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø-10
    top_text = "üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP</b>:\n\n"
    for idx, entry in enumerate(leaderboard[:10], start=1):
        name = entry.get("first_name") or f"@{entry.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        status, _ = determine_status(entry['xp'])

        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_icon = {
            "–Ω–æ–≤–∏—á–æ–∫": "üü¢",
            "–æ–ø—ã—Ç–Ω—ã–π": "üî∏",
            "–ø—Ä–æ—Ñ–∏": "üöÄ",
            "—ç–∫—Å–ø–µ—Ä—Ç": "üëë"
        }.get(status, "‚ùì")

        # –ò–∫–æ–Ω–∫–∞ –º–µ—Å—Ç–∞
        place_emoji = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(idx, f"{idx}.")
        highlight = " (—Ç—ã)" if entry['user_id'] == user_id else ""

        top_text += f"{place_emoji} {name} ‚Äî {status_icon} {entry['xp']} XP{highlight}\n"

    # –ù–∞–π–¥—ë–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for idx, entry in enumerate(leaderboard, start=1):
        if entry['user_id'] == user_id:
            user_place = idx
            break

    # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–ª–µ–¥—É—é—â—É—é —Ü–µ–ª—å
    current_status, _ = determine_status(current_xp)
    next_status_info = {
        "–Ω–æ–≤–∏—á–æ–∫": ("–æ–ø—ã—Ç–Ω—ã–π", 11),
        "–æ–ø—ã—Ç–Ω—ã–π": ("–ø—Ä–æ—Ñ–∏", 51),
        "–ø—Ä–æ—Ñ–∏": ("—ç–∫—Å–ø–µ—Ä—Ç", 101),
        "—ç–∫—Å–ø–µ—Ä—Ç": ("—ç–∫—Å–ø–µ—Ä—Ç", 9999)
    }
    next_status, xp_target = next_status_info.get(current_status, ("–æ–ø—ã—Ç–Ω—ã–π", 11))
    xp_left = max(0, xp_target - current_xp)

    # –•–≤–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    tail = f"\nüë§ –¢—ã —Å–µ–π—á–∞—Å –Ω–∞ {user_place} –º–µ—Å—Ç–µ"
    if current_status == "—ç–∫—Å–ø–µ—Ä—Ç":
        tail += "\nüéì –¢—ã –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞–π –¥—Ä—É–≥–∏–º üí™"
    else:
        tail += f"\nüìà –î–æ —É—Ä–æ–≤–Ω—è ¬´{next_status}¬ª –æ—Å—Ç–∞–ª–æ—Å—å {xp_left} XP\n"
        tail += "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"

    await message.answer(top_text + tail, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ùì –ü–æ–º–æ—â—å"
@router.message(lambda m: m.text and "–ø–æ–º–æ—â—å" in m.text.lower())
async def help_handler(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n"
        "–Ø ‚Äî —Ç–≤–æ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ–º–æ–≥–∞—é –∏–∑—É—á–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "‚ùì <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b>\n"
        "1. –í—ã–±–µ—Ä–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.\n"
        "2. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—Ä–æ–≥–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ.\n"
        "3. –ü–æ–ª—É—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.\n\n"
        "üìå <b>–ö–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ?</b>\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω.\n"
        "‚Ä¢ –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.\n"
        "‚Ä¢ –ù–µ –∑–∞–¥–∞–≤–∞–π –æ–±—â–∏—Ö –∏–ª–∏ –æ—Ç–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ.\n"
        "‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –±–æ—Ç –Ω–µ –¥–∞—Å—Ç –æ—Ç–≤–µ—Ç.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚úÖ <i>¬´–ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –º–µ–¥–∏–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏?¬ª</i>\n"
        "‚úÖ <i>¬´–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç?¬ª</i>\n"
        "‚ùå <i>¬´–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å¬ª</i>\n"
        "‚ùå <i>¬´–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?¬ª</i>\n\n"
        "üí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
        "‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å XP (–µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏).\n"
        "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ <b>‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏</b> ‚Äî –≤—Å—ë –ø—Ä–æ —É—Ä–æ–≤–Ω–∏, –º–∏—Å—Å–∏–∏, –±–æ–Ω—É—Å—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        "üìÑ <b>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –æ–ø–ª–∞—Ç–∞:</b>\n"
        "<a href='http://tgbotai.ru/'>–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç</a>\n\n"
        "–£–¥–∞—á–∏ –≤ —É—á—ë–±–µ –∏ –ø—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–æ–∫–∞—á–∫–∏! üìö"
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())

# ===== –ü–æ–∫—É–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Robokassa =====

def generate_shop_links(user_id: int):
    return {
        "üí° –õ–∞–π—Ç-–¥–æ—Å—Ç—É–ø ‚Äî 149‚ÇΩ": create_payment(149, "–ü–æ–∫—É–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –õ–∞–π—Ç", user_id, questions=30, status="light"),
        "üöÄ –ü—Ä–æ-–¥–æ—Å—Ç—É–ø ‚Äî 299‚ÇΩ": create_payment(299, "–ü–æ–∫—É–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ü—Ä–æ", user_id, questions=100, status="pro"),
        "üí° 1 –≤–æ–ø—Ä–æ—Å ‚Äî 10‚ÇΩ": create_payment(10, "–ü–æ–∫—É–ø–∫–∞ 1 –≤–æ–ø—Ä–æ—Å–∞", user_id, 1),
        "üî• 10 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 90‚ÇΩ": create_payment(90, "–ü–æ–∫—É–ø–∫–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤", user_id, 10),
        "üöÄ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 450‚ÇΩ": create_payment(450, "–ü–æ–∫—É–ø–∫–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤", user_id, 50),
        "üëë 100 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 900‚ÇΩ": create_payment(900, "–ü–æ–∫—É–ø–∫–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤", user_id, 100),
   }


@router.message(lambda message: message.text == "üõç –ú–∞–≥–∞–∑–∏–Ω")
async def buy_questions_handler(message: types.Message):
    links = generate_shop_links(message.from_user.id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=label)] for label in links] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    text = (
        "üí∞ <b>–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
        "üéì –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –Ω–æ–≤–æ–º—É —Å—Ç–∞—Ç—É—Å—É!\n"
        "üöÄ –ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Üí –±–æ–ª—å—à–µ –∑–Ω–∞–Ω–∏–π ‚Üí –≤—ã—à–µ XP\n"
        "üìà –ê –µ—â—ë –ü—Ä–æ—Ñ–∏ –∏ –≠–∫—Å–ø–µ—Ä—Ç –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å—ã –∏ YouTube-–≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ ü§©\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –Ω–∏–∂–µ ‚§µÔ∏è"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.message(lambda message: message.text in generate_shop_links(message.from_user.id))
async def handle_shop_selection(message: types.Message):
    link = generate_shop_links(message.from_user.id)[message.text]
    await message.answer(f"üí≥ –û–ø–ª–∞—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}", reply_markup=get_main_keyboard())

def get_shop_keyboard():
    keyboard = [
        [KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="üí° –õ–∞–π—Ç-–¥–æ—Å—Ç—É–ø ‚Äî 149‚ÇΩ")],
        [KeyboardButton(text="üöÄ –ü—Ä–æ-–¥–æ—Å—Ç—É–ø ‚Äî 299‚ÇΩ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@router.message(lambda msg: msg.text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def show_status_info(message: types.Message):
    await message.answer(
        "üéñ <b>–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤</b>\n"
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–ø–æ–ª–Ω—è–π –º–∏—Å—Å–∏–∏ –∏ –ø–æ–ª—É—á–∞–π XP ‚Äî –ø—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å!\n\n"
        "üü¢ <b>–ù–æ–≤–∏—á–æ–∫</b> ‚Äî 0‚Äì10 XP (+5 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü)\n"
        "üî∏ <b>–û–ø—ã—Ç–Ω—ã–π</b> ‚Äî 11‚Äì50 XP (+10 –≤ –º–µ—Å—è—Ü)\n"
        "üöÄ <b>–ü—Ä–æ—Ñ–∏</b> ‚Äî 51‚Äì150 XP (+20 –≤ –º–µ—Å—è—Ü, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)\n"
        "üëë <b>–≠–∫—Å–ø–µ—Ä—Ç</b> ‚Äî 151‚Äì300 XP (+30 –≤ –º–µ—Å—è—Ü, –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DALL¬∑E)\n"
        "üß† <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫</b> ‚Äî 301‚Äì999 XP (+50 –≤ –º–µ—Å—è—Ü, NFT-–±–µ–π–¥–∂–∏)\n"
        "üéì <b>–õ–µ–≥–µ–Ω–¥–∞</b> ‚Äî 1000‚Äì4999 XP (+75 –≤ –º–µ—Å—è—Ü)\n"
        "üõ∏ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å</b> ‚Äî 5000+ XP (+100 –≤ –º–µ—Å—è—Ü)\n\n"
        "üìà <b>–ë–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–µ 100 XP ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å üéÅ\n"
        "‚Ä¢ –°—Ç—Ä–∏–∫ 7 –∏ 14 –¥–Ω–µ–π ‚Äî –µ—â—ë –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤ üî•\n\n"
        "üéØ <b>–ú–∏—Å—Å–∏–∏:</b>\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ 3 –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–µ ‚Äî 10 –≤–æ–ø—Ä–æ—Å–æ–≤, 50 XP, 5 –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –∏ –¥—Ä—É–≥–∏–µ\n"
        "‚Ä¢ –°—Ç—Ä–∏–∫-–º–∏—Å—Å–∏–∏ ‚Äî –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –¥–Ω–∏ –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã\n\n"
        "üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏\n"
        "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, 100 XP, 10 –º–∏—Å—Å–∏–π –ø–æ–¥—Ä—è–¥ –∏ –¥—Ä.\n\n"
        "üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        "‚Ä¢ üí° <b>–õ–∞–π—Ç</b> ‚Äî –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 7 –¥–Ω–µ–π, XP –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è\n"
        "‚Ä¢ üöÄ <b>–ü—Ä–æ</b> ‚Äî –±–µ–∑–ª–∏–º–∏—Ç, +100 –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–∏–¥–µ–æ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º, DALL¬∑E, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
        "üîê <i>–ü–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞—é—Ç –ª–∏–º–∏—Ç—ã –∏ –¥–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º</i>\n"
        "üî• <i>–ü—Ä–æ–∫–∞—á–∏–≤–∞–π—Å—è, –ø–æ–±–µ–∂–¥–∞–π –∏ –ø–æ–ø–∞–¥–∏ –≤ –õ–µ–≥–µ–Ω–¥—ã!</i>",
        parse_mode="HTML"
    )


@router.message(lambda msg: msg.text == "üéØ –ú–∏—Å—Å–∏–∏")
async def show_missions(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id)
    today_str = datetime.now().strftime("%d.%m.%Y")

    lines = ["üéØ <b>–¢–≤–æ–∏ –º–∏—Å—Å–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"]

    for mission in get_all_missions():
        last_key = f"last_{mission.id}"
        last_done = profile.get(last_key, "")

        if last_done == today_str:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        else:
            status = "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"

        lines.append(f"{mission.title} ‚Äî {status} (+{mission.reward} XP)")

    await message.answer("\n".join(lines), parse_mode="HTML")