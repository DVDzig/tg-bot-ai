from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.keyboard import get_main_keyboard
from services.user_service import (
    apply_xp_penalty_if_needed,
    get_user_activity_stats,
    determine_status,
    get_user_profile, 
    get_or_create_user
)
from services.google_sheets_service import get_leaderboard, get_sheet_data
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.markdown import hlink
from services.yookassa_service import create_payment
from config import USER_SHEET_ID


router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command("start"))
async def start_handler(message: types.Message):
    user = message.from_user
    get_or_create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code,
        is_premium=getattr(user, "is_premium", False)
    )
    apply_xp_penalty_if_needed(user.id)

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç üëã\n\n"
        "–Ø ‚Äî –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è.\n\n"
        "üß† –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ ‚Äî –µ—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π, —è –Ω–µ —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
        "üéØ –ó–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å XP –∏ —Ä–∞—Å—Ç—ë—à—å –≤ —Å—Ç–∞—Ç—É—Å–µ:\n"
        "üü¢ –ù–æ–≤–∏—á–æ–∫ ‚Äî 0‚Äì10 XP\n"
        "üî∏ –û–ø—ã—Ç–Ω—ã–π ‚Äî 11‚Äì50 XP\n"
        "üöÄ –ü—Ä–æ—Ñ–∏ ‚Äî 51‚Äì100 XP\n"
        "üëë –≠–∫—Å–ø–µ—Ä—Ç ‚Äî 101+ XP\n\n"
        "üí∞ –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è? –ö—É–ø–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ‚Äî –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –æ–±—É—á–µ–Ω–∏–µ.\n"
        "üìà –°–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª.\n"
        "üé• –ê –µ—Å–ª–∏ —Ç—ã –ü—Ä–æ—Ñ–∏ –∏–ª–∏ –≠–∫—Å–ø–µ—Ä—Ç ‚Äî —è –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ –µ—â—ë –∏ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ.\n\n"
        "–ì–æ—Ç–æ–≤? –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ ‚§µÔ∏è"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

async def go_to_start_screen(message: types.Message):
    text = (
        "üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        "‚ùì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏ –ø–æ–ª—É—á–∞–π XP\n"
        "üèÜ –í—ã–ø–æ–ª–Ω—è–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ (3 –≤–æ–ø—Ä–æ—Å–∞ –≤ –¥–µ–Ω—å ‚Äî –∏ –±–æ–Ω—É—Å XP)\n"
        "üé• –ü—Ä–æ—Ñ–∏ –∏ –≠–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ\n"
        "üí∞ –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ö—É–ø–∏ –ø–∞–∫–µ—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚§µÔ∏è"
    )
    await message.answer(text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@router.message(lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    profile_data = get_user_profile(user_id)
    stats = get_user_activity_stats(user_id)
    payment_log = get_sheet_data(USER_SHEET_ID, "PaymentsLog!A2:G")
    last_payment = None
    for row in reversed(payment_log):
        if row[0] == str(user_id) and row[4] == "payment.succeeded":
            last_payment = row
            break

    if last_payment:
        q_count = last_payment[2]
        price = last_payment[1]
        date = last_payment[6]
        last_purchase_text = f"\nüßæ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞:</b>\n‚Ä¢ {q_count} –≤–æ–ø—Ä–æ—Å(–æ–≤), {price}‚ÇΩ\n‚Ä¢ {date}"
    else:
        last_purchase_text = ""

    current_xp = profile_data['xp']
    new_status, _ = determine_status(current_xp)

    thresholds = {
        "–Ω–æ–≤–∏—á–æ–∫": (0, 10),
        "–æ–ø—ã—Ç–Ω—ã–π": (11, 50),
        "–ø—Ä–æ—Ñ–∏": (51, 100),
        "—ç–∫—Å–ø–µ—Ä—Ç": (101, 150)
    }
    min_xp, max_xp = thresholds.get(new_status, (0, 10))
    if current_xp >= max_xp:
        progress = 100
    else:
        progress = int(((current_xp - min_xp) / (max_xp - min_xp)) * 100)
    bar_blocks = min(5, int(progress / 5))
    progress_bar = "üü©" * bar_blocks + "‚¨úÔ∏è" * (5 - bar_blocks)

    daily_goal = 3
    challenge_text = (
        f"üî• –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –∑–∞–¥–∞–ª {stats['today']} –∏–∑ {daily_goal} –≤–æ–ø—Ä–æ—Å–æ–≤!"
        if stats['today'] < daily_goal
        else "üèÜ –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!"
    )
    # –û–ø—Ä–µ–¥–µ–ª–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Å—Ç–∞—Ç—É—Å –∏ —Å–∫–æ–ª—å–∫–æ XP –¥–æ –Ω–µ–≥–æ
    next_status_info = {
        "–Ω–æ–≤–∏—á–æ–∫": ("–æ–ø—ã—Ç–Ω—ã–π", 11),
        "–æ–ø—ã—Ç–Ω—ã–π": ("–ø—Ä–æ—Ñ–∏", 51),
        "–ø—Ä–æ—Ñ–∏": ("—ç–∫—Å–ø–µ—Ä—Ç", 101),
        "—ç–∫—Å–ø–µ—Ä—Ç": ("—ç–∫—Å–ø–µ—Ä—Ç", 9999)
    }
    next_status, xp_target = next_status_info.get(new_status, ("–æ–ø—ã—Ç–Ω—ã–π", 11))
    xp_left = max(0, xp_target - current_xp)

    profile_text = (
        f"üë§ <b>–ò–º—è:</b> {profile_data['first_name']}\n"
        f"üéñÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {new_status.capitalize()} ‚Äî {progress_bar} {progress}%\n"
        f"‚≠ê <b>–¢–≤–æ–π XP:</b> {current_xp} XP\n"
        f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> {profile_data['last_interaction']}\n\n"

        f"üéÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: {profile_data['free_questions']}\n"
        f"‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ: {profile_data['paid_questions']}\n"

        f"{last_purchase_text}\n\n"

        f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['today']} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n"
        f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['week']} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total']} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n\n"

        f"{challenge_text}\n\n"
        + (
            f"üí° <i>–ë–ª–∏–∂–∞–π—à–∏–π —Å—Ç–∞—Ç—É—Å:</i> {next_status} (–µ—â—ë {xp_left} XP)\n"
            if new_status != "—ç–∫—Å–ø–µ—Ä—Ç"
            else "üéì –¢—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üèÜ\n"
        )
    )


    await message.answer(profile_text, parse_mode="HTML", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥"
@router.message(lambda msg: msg.text == "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
async def leaderboard_handler(message: types.Message):
    leaderboard = get_leaderboard(top_n=100)  # –ü–æ–ª—É—á–∏–º —Å—Ä–∞–∑—É 100, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not leaderboard:
        await message.answer("üèÜ –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.")
        return

    user_id = str(message.from_user.id)
    user_profile = get_user_profile(int(user_id))
    current_xp = user_profile['xp']
    user_place = None

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø-10
    top_text = "üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP</b>:\n\n"
    for idx, entry in enumerate(leaderboard[:10], start=1):
        name = entry.get("first_name") or f"@{entry.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        status, _ = determine_status(entry['xp'])

        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_icon = {
            "–Ω–æ–≤–∏—á–æ–∫": "üü¢",
            "–æ–ø—ã—Ç–Ω—ã–π": "üî∏",
            "–ø—Ä–æ—Ñ–∏": "üöÄ",
            "—ç–∫—Å–ø–µ—Ä—Ç": "üëë"
        }.get(status, "‚ùì")

        # –ò–∫–æ–Ω–∫–∞ –º–µ—Å—Ç–∞
        place_emoji = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(idx, f"{idx}.")
        highlight = " (—Ç—ã)" if entry['user_id'] == user_id else ""

        top_text += f"{place_emoji} {name} ‚Äî {status_icon} {entry['xp']} XP{highlight}\n"

    # –ù–∞–π–¥—ë–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for idx, entry in enumerate(leaderboard, start=1):
        if entry['user_id'] == user_id:
            user_place = idx
            break

    # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–ª–µ–¥—É—é—â—É—é —Ü–µ–ª—å
    current_status, _ = determine_status(current_xp)
    next_status_info = {
        "–Ω–æ–≤–∏—á–æ–∫": ("–æ–ø—ã—Ç–Ω—ã–π", 11),
        "–æ–ø—ã—Ç–Ω—ã–π": ("–ø—Ä–æ—Ñ–∏", 51),
        "–ø—Ä–æ—Ñ–∏": ("—ç–∫—Å–ø–µ—Ä—Ç", 101),
        "—ç–∫—Å–ø–µ—Ä—Ç": ("—ç–∫—Å–ø–µ—Ä—Ç", 9999)
    }
    next_status, xp_target = next_status_info.get(current_status, ("–æ–ø—ã—Ç–Ω—ã–π", 11))
    xp_left = max(0, xp_target - current_xp)

    # –•–≤–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    tail = f"\nüë§ –¢—ã —Å–µ–π—á–∞—Å –Ω–∞ {user_place} –º–µ—Å—Ç–µ"
    if current_status == "—ç–∫—Å–ø–µ—Ä—Ç":
        tail += "\nüéì –¢—ã –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞–π –¥—Ä—É–≥–∏–º üí™"
    else:
        tail += f"\nüìà –î–æ —É—Ä–æ–≤–Ω—è ¬´{next_status}¬ª –æ—Å—Ç–∞–ª–æ—Å—å {xp_left} XP\n"
        tail += "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"

    await message.answer(top_text + tail, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ùì –ü–æ–º–æ—â—å"
@router.message(lambda m: m.text and "–ø–æ–º–æ—â—å" in m.text.lower())
async def help_handler(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n"
        "–Ø ‚Äî –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —É—á–µ–±–Ω—ã–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º. –ü–æ–º–æ–≥–∞—é –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.\n\n"
        "‚ùì <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
        "‚Ä¢ –ó–∞–¥–∞–µ—à—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ‚Äî –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç–≤–µ—Ç.\n"
        "‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 1 XP (–æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏).\n"
        "‚Ä¢ XP –ø–æ–≤—ã—à–∞—é—Ç —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –±–æ–Ω—É—Å—ã.\n\n"
        "‚öôÔ∏è –û—Ç–≤–µ—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ. –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –Ω–µ—Ç —Å–ª–æ–≤ –∏–∑ —Ç–µ–º—ã ‚Äî –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç.\n\n"
        "üèÜ <b>–°—Ç–∞—Ç—É—Å—ã –∏ XP</b>\n"
        "‚Ä¢ üü¢ –ù–æ–≤–∏—á–æ–∫ 0‚Äì10 XP\n"
        "‚Ä¢ üî∏ –û–ø—ã—Ç–Ω—ã–π 11‚Äì50 XP\n"
        "‚Ä¢ üöÄ –ü—Ä–æ—Ñ–∏ 51‚Äì100 XP\n"
        "‚Ä¢ üëë –≠–∫—Å–ø–µ—Ä—Ç 101+ XP\n\n"
        "‚ö†Ô∏è –ù–µ –∑–∞—Ö–æ–¥–∏–ª 5 –¥–Ω–µ–π ‚Äî –º–∏–Ω—É—Å 5 XP\n"
        "‚ö†Ô∏è –ù–µ –∑–∞—Ö–æ–¥–∏–ª 10 –¥–Ω–µ–π ‚Äî –º–∏–Ω—É—Å 10 XP\n\n"
        "üí≥ <b>–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?</b>\n"
        "–ü–æ–∫—É–ø–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.\n\n"
        "üéÅ <b>–ë–æ–Ω—É—Å—ã</b>\n"
        "–£—á–∞—Å—Ç–≤—É–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n"
        "üìù <b>–ü–∞–º—è—Ç–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º</b>\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã ‚Äî —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª.\n"
        "‚Ä¢ –ù–µ –∑–∞–¥–∞–≤–∞–π –æ–±—â–∏–µ/–Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç.\n"
        "‚Ä¢ –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å ‚Äî —Ç–µ–º –ª—É—á—à–µ –æ—Ç–≤–µ—Ç.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
        "‚úÖ <i>¬´–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ–¥–∏–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–æ—Ä—Ç–µ?¬ª</i>\n"
        "‚ùå <i>¬´–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å¬ª</i>\n\n"
        "üìÑ <b>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞:</b>\n"
        "<a href='http://tgbotai.ru/'>–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç</a>\n\n"
        "–£–¥–∞—á–∏ –≤ —É—á–µ–±–µ! üìö"
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())

# ===== –ü–æ–∫—É–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Robokassa =====

def generate_shop_links(user_id: int):
    return {
        "üí° 1 –≤–æ–ø—Ä–æ—Å ‚Äî 10‚ÇΩ": create_payment(10, "–ü–æ–∫—É–ø–∫–∞ 1 –≤–æ–ø—Ä–æ—Å–∞", user_id, 1),
        "üî• 10 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 90‚ÇΩ": create_payment(90, "–ü–æ–∫—É–ø–∫–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤", user_id, 10),
        "üöÄ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 450‚ÇΩ": create_payment(450, "–ü–æ–∫—É–ø–∫–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤", user_id, 50),
        "üëë 100 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 900‚ÇΩ": create_payment(900, "–ü–æ–∫—É–ø–∫–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤", user_id, 100),
    }

@router.message(lambda message: message.text == "üí∞ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
async def buy_questions_handler(message: types.Message):
    links = generate_shop_links(message.from_user.id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=label)] for label in links] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    text = (
        "üí∞ <b>–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
        "üéì –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –Ω–æ–≤–æ–º—É —Å—Ç–∞—Ç—É—Å—É!\n"
        "üöÄ –ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Üí –±–æ–ª—å—à–µ –∑–Ω–∞–Ω–∏–π ‚Üí –≤—ã—à–µ XP\n"
        "üìà –ê –µ—â—ë –ü—Ä–æ—Ñ–∏ –∏ –≠–∫—Å–ø–µ—Ä—Ç –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å—ã –∏ YouTube-–≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ ü§©\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –Ω–∏–∂–µ ‚§µÔ∏è"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.message(lambda message: message.text in generate_shop_links(message.from_user.id))
async def handle_shop_selection(message: types.Message):
    link = generate_shop_links(message.from_user.id)[message.text]
    await message.answer(f"üí≥ –û–ø–ª–∞—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}", reply_markup=get_main_keyboard())

