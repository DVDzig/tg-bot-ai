from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.keyboard import get_main_keyboard
from services.user_service import get_user_profile, get_or_create_user
from services.user_service import (
    apply_xp_penalty_if_needed,
    get_user_activity_stats,
    determine_status
)
from services.google_sheets_service import get_leaderboard
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.markdown import hlink
from hashlib import md5
from config import robokassa_links as old_links
from urllib.parse import quote

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command("start"))
async def start_handler(message: types.Message):
    user = message.from_user
    get_or_create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code,
        is_premium=getattr(user, "is_premium", False)
    )
    apply_xp_penalty_if_needed(user.id)

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç üëã\n\n"
        "–Ø ‚Äî –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –ø–æ–º–æ–≥—É –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ª—é–±–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ —Ç–≤–æ–µ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n"
        "üéØ –ó–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å XP –∏ —Ä–∞—Å—Ç–µ—à—å –≤ —Å—Ç–∞—Ç—É—Å–µ:\n"
        "üü¢ –ù–æ–≤–∏—á–æ–∫ ‚Äî 0 - 10 XP\n"
        "üî∏ –û–ø—ã—Ç–Ω—ã–π ‚Äî 11 ‚Äì 50 XP\n"
        "üöÄ –ü—Ä–æ—Ñ–∏ ‚Äî 51 - 100 XP\n"
        "üëë –≠–∫—Å–ø–µ—Ä—Ç ‚Äî 101+ XP\n\n"
        "üí∞ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤? –ö—É–ø–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã ‚Äî –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚§µÔ∏è"
    )
    markup = get_main_keyboard()
    await message.answer(welcome_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@router.message(lambda message: message.text.lower() == "üë§ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id

    profile_data = get_user_profile(user_id)
    stats = get_user_activity_stats(user_id)

    current_xp = profile_data['xp']
    new_status, _ = determine_status(current_xp)

    thresholds = {
        "–Ω–æ–≤–∏—á–æ–∫": (0, 10),
        "–æ–ø—ã—Ç–Ω—ã–π": (11, 50),
        "–ø—Ä–æ—Ñ–∏": (51, 100),
        "—ç–∫—Å–ø–µ—Ä—Ç": (101, 150)
    }
    min_xp, max_xp = thresholds.get(new_status, (0, 10))
    progress = int(((current_xp - min_xp) / (max_xp - min_xp)) * 100) if max_xp > min_xp else 100
    bar_blocks = min(5, int(progress / 5))
    progress_bar = "üü©" * bar_blocks + "‚¨úÔ∏è" * (5 - bar_blocks)
    progress_display = f"{progress_bar} {progress}%"

    daily_goal = 3
    challenge_text = (
        f"üî• –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –∑–∞–¥–∞–ª {stats['today']} –∏–∑ {daily_goal} –≤–æ–ø—Ä–æ—Å–æ–≤!"
        if stats['today'] < daily_goal
        else "üèÜ –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!"
    )

    profile_text = (
        f"üë§ <b>–ò–º—è:</b> {profile_data['first_name']}\n"
        f"üéñÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {new_status.capitalize()}\n"
        f"‚≠ê <b>XP:</b> {current_xp} (–ø—Ä–æ–≥—Ä–µ—Å—Å: {progress_display})\n"
        f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> {profile_data['last_interaction']}\n"
        f"üéÅ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b> {profile_data['free_questions']}\n"
        f"üí∞ <b>–ü–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b> {profile_data['paid_questions']}\n\n"
        f"üìà <b>–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['today']} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n"
        f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['week']} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total']} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n\n"
        f"{challenge_text}"
    )

    await message.answer(profile_text, parse_mode="HTML", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥"
@router.message(lambda msg: msg.text == "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
async def leaderboard_handler(message: types.Message):
    leaderboard = get_leaderboard(top_n=10)
    if not leaderboard:
        await message.answer("üèÜ –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.")
        return

    user_id = str(message.from_user.id)
    text = "üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP</b>:\n\n"
    for idx, entry in enumerate(leaderboard, start=1):
        name = entry.get("first_name") or f"@{entry.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        highlight = " (—Ç—ã)" if entry['user_id'] == user_id else ""

        status, _ = determine_status(entry['xp'])
        status_icon = {
            "–Ω–æ–≤–∏—á–æ–∫": "üü¢",
            "–æ–ø—ã—Ç–Ω—ã–π": "üî∏",
            "–ø—Ä–æ—Ñ–∏": "üöÄ",
            "—ç–∫—Å–ø–µ—Ä—Ç": "üëë"
        }.get(status, "‚ùì")

        text += f"{idx}. {name} ‚Äî {status_icon} {entry['xp']} XP{highlight}\n"

    await message.answer(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
@router.message(lambda m: m.text and "–ø–æ–º–æ—â—å" in m.text.lower())
async def help_handler(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n"
        "–Ø ‚Äî –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —É—á–µ–±–Ω—ã–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º. –ü–æ–º–æ–≥–∞—é –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.\n\n"
        "‚ùì <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
        "‚Ä¢ –ó–∞–¥–∞–µ—à—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ‚Äî –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç–≤–µ—Ç.\n"
        "‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 1 XP (–æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏).\n"
        "‚Ä¢ XP –ø–æ–≤—ã—à–∞—é—Ç —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –±–æ–Ω—É—Å—ã.\n\n"
        "üèÜ <b>–°—Ç–∞—Ç—É—Å—ã –∏ XP</b>\n"
        "‚Ä¢ üê£ –ù–æ–≤–∏—á–æ–∫ 0‚Äì10 XP\n"
        "‚Ä¢ üéØ –û–ø—ã—Ç–Ω—ã–π 11‚Äì50 XP\n"
        "‚Ä¢ üöÄ –ü—Ä–æ—Ñ–∏ 51‚Äì100 XP\n"
        "‚Ä¢ üëë –≠–∫—Å–ø–µ—Ä—Ç 101+ XP\n\n"
        "‚ö†Ô∏è –ù–µ –∑–∞—Ö–æ–¥–∏–ª 5 –¥–Ω–µ–π ‚Äî –º–∏–Ω—É—Å 5 XP\n"
        "‚ö†Ô∏è –ù–µ –∑–∞—Ö–æ–¥–∏–ª 10 –¥–Ω–µ–π ‚Äî –º–∏–Ω—É—Å 10 XP\n\n"
        "üí≥ <b>–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?</b>\n"
        "–ü–æ–∫—É–ø–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.\n\n"
        "üéÅ <b>–ë–æ–Ω—É—Å—ã</b>\n"
        "–£—á–∞—Å—Ç–≤—É–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n"
        "üìù <b>–ü–∞–º—è—Ç–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º</b>\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã ‚Äî —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª.\n"
        "‚Ä¢ –ù–µ –∑–∞–¥–∞–≤–∞–π –æ–±—â–∏–µ/–Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç.\n"
        "‚Ä¢ –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å ‚Äî —Ç–µ–º –ª—É—á—à–µ –æ—Ç–≤–µ—Ç.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
        "‚úÖ <i>¬´–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ–¥–∏–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–æ—Ä—Ç–µ?¬ª</i>\n"
        "‚ùå <i>¬´–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å¬ª</i>\n\n"
        "üìÑ <b>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞:</b>\n"
        "<a href='https://project12671307.tilda.ws/'>–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç</a>\n\n"
        "–£–¥–∞—á–∏ –≤ —É—á–µ–±–µ! üìö"
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ Robokassa
def robokassa_link(amount: int, questions: int, user_id: int) -> str:
    login = "TGTutorBot"
    password1 = "iP540dCVN006A3Ul"
    inv_id = f"{user_id}_{questions}"
    description = f"Buy {questions} Q"
    encoded_description = quote(description)

    signature_raw = f"{login}:{amount}:{inv_id}:{password1}"
    signature = md5(signature_raw.encode()).hexdigest()

    return (
        f"https://auth.robokassa.ru/Merchant/Index.aspx?"
        f"MerchantLogin={login}&OutSum={amount}&InvId={inv_id}&"
        f"Description={encoded_description}&"
        f"Shp_Questions={questions}&Shp_UserID={user_id}&"
        f"SignatureValue={signature}"
    )

# –°–ª–æ–≤–∞—Ä—å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
def generate_shop_links(user_id: int):
    return {
        "1 –≤–æ–ø—Ä–æ—Å ‚Äî 10‚ÇΩ": robokassa_link(10, 1, user_id),
        "10 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 90‚ÇΩ": robokassa_link(90, 10, user_id),
        "50 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 450‚ÇΩ": robokassa_link(450, 50, user_id),
        "100 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 900‚ÇΩ": robokassa_link(900, 100, user_id),
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã"
@router.message(lambda message: message.text == "üí∞ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
async def buy_questions_handler(message: types.Message):
    links = generate_shop_links(message.from_user.id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=label)] for label in links] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø–∞–∫–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(lambda message: message.text in generate_shop_links(message.from_user.id))
async def handle_shop_selection(message: types.Message):
    link = generate_shop_links(message.from_user.id)[message.text]
    await message.answer(f"üí≥ –û–ø–ª–∞—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=get_main_keyboard())
