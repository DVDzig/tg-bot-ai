import logging
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from fastapi import FastAPI
from aiogram import Bot, Dispatcher
from aiogram.types import WebhookInfo
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from config import TOKEN
from webhook_handler import router as yookassa_router
from handlers import register_all_routers
from middlewares.ensure_user import EnsureUserMiddleware
from utils.scheduler import schedule_all_jobs, schedule_monthly_bonus, schedule_leaderboard_update
from aiogram import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === FastAPI app ===
app = FastAPI()
app.include_router(yookassa_router)

# === Telegram Bot & Dispatcher ===
bot = Bot(token=TOKEN, default={'parse_mode': ParseMode.HTML})
dp = Dispatcher(storage=MemoryStorage())

# Middleware
dp.message.middleware(EnsureUserMiddleware())
dp.callback_query.middleware(EnsureUserMiddleware())

# –†–æ—É—Ç–µ—Ä—ã
register_all_routers(dp)

async def set_webhook():
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º webhook
    webhook_url = "https://yourdomain.com/webhook"  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π URL
    await bot.set_webhook(webhook_url)

@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ –°—Ç–∞—Ä—Ç Telegram-–±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await set_webhook()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    schedule_leaderboard_update(scheduler)  # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    schedule_all_jobs(bot)  # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á
    schedule_monthly_bonus(scheduler)  # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    
    # –°—Ç–∞—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()

