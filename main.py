import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Update
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.client.default import DefaultBotProperties
from aiogram.types import MenuButtonCommands
from aiogram.types import BotCommand, MenuButtonCommands
from config import TOKEN
from bot import bot

from handlers import (
    start_handler,
    admin_handler,
    info_handler,
    missions_handler,
    profile_handler,
    shop_handler,
    leaderboard_handler,
    program_handler,    
    shop_navigation
)
from middlewares.ensure_user import EnsureUserMiddleware
from utils.scheduler import schedule_all_jobs, schedule_monthly_bonus

dp = Dispatcher(storage=MemoryStorage())

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === FastAPI app ===
app = FastAPI()

# === –î–∏—Å–ø–µ—Ç—á–µ—Ä—ã —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
dp.include_router(admin_handler.router)
dp.include_router(info_handler.router)
dp.include_router(missions_handler.router)
dp.include_router(profile_handler.router)
dp.include_router(shop_handler.router)            # ‚úÖ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω shop_handler
dp.include_router(leaderboard_handler.router)
dp.include_router(program_handler.router)
dp.include_router(start_handler.router)
dp.include_router(shop_navigation.router)


# === Telegram Bot & Dispatcher ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# Middleware
dp.message.middleware(EnsureUserMiddleware())
dp.callback_query.middleware(EnsureUserMiddleware())

# === Webhook endpoint ===
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞")
        return {"error": str(e)}

# === Root endpoint (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Render) ===
@app.get("/")
async def root():
    return {"status": "Bot is running"}

@app.head("/")
async def root_head():
    return

# === Startup event ===
@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

    webhook_url = "https://tg-bot-ai-teyr.onrender.com/webhook"
    await bot.set_webhook(webhook_url)

    # üÜï –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é (–≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ Telegram)
    await bot.set_my_commands([
        BotCommand(command="start", description="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    ])
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler = AsyncIOScheduler()
    scheduler.start()
