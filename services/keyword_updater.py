from collections import defaultdict
from datetime import datetime
from openai import OpenAI
from services.google_sheets_service import (
    get_keywords_for_discipline,
    update_keywords_for_discipline    
)
from services.sheets import (
    get_sheets_service, 
    update_sheet_row, 
    get_column_index_by_name
)
from config import PROGRAM_SHEETS, OPENAI_API_KEY

client = OpenAI(api_key=OPENAI_API_KEY)

DATE_FORMAT = "%d %B %Y, %H:%M"

async def update_keywords_from_logs():
    service = get_sheets_service()
    sheet = service.spreadsheets().values()

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º QA_Log
    data = sheet.get(
        spreadsheetId=PROGRAM_SHEETS,
        range="QA_Log!A1:Z1000"
    ).execute()

    values = data.get("values", [])
    if not values or len(values) < 2:
        return [], ["QA_Log –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]

    headers = values[0]
    header_map = {h: i for i, h in enumerate(headers)}

    required = ["program", "module", "discipline", "question", "answer", "timestamp"]
    if not all(h in header_map for h in required):
        return [], ["–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ QA_Log"]

    # 2. –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ (program, module, discipline)
    grouped = defaultdict(list)
    last_asked_map = {}
    row_map = defaultdict(list)

    for idx, row in enumerate(values[1:], start=2):  # –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
        try:
            program = row[header_map["program"]]
            module = row[header_map["module"]]
            discipline = row[header_map["discipline"]]
            question = row[header_map["question"]]
            answer = row[header_map["answer"]]
            timestamp_raw = row[header_map["timestamp"]]
            timestamp = datetime.strptime(timestamp_raw, DATE_FORMAT)
        except Exception:
            continue

        key = (program, module, discipline)
        grouped[key].append(f"{question}\n{answer}")
        row_map[key].append(idx)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π timestamp –ø–æ –∫–ª—é—á—É
        if key not in last_asked_map or timestamp > last_asked_map[key]:
            last_asked_map[key] = timestamp

    updated = []
    failed = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å last_updated
    last_updated_col = await get_column_index_by_name(PROGRAM_SHEETS, "QA_Log", "last_updated")

    for key, text_blocks in grouped.items():
        program, module, discipline = key
        last_asked = last_asked_map[key]
        rows = row_map[key]

        # –Ω–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –ø–µ—Ä–≤—ã–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º —Å—Ç—Ä–æ–∫–∞–º
        last_updated = None
        for row_idx in rows:
            try:
                row_data = values[row_idx - 1]
                raw_date = row_data[last_updated_col] if last_updated_col < len(row_data) else ""
                if raw_date:
                    last_updated = datetime.strptime(raw_date, DATE_FORMAT)
                    break
            except:
                continue

        if last_updated and (datetime.now() - last_updated).days < 7:
            print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: {program} / {module} / {discipline} ‚Äî –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å –º–µ–Ω–µ–µ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
            continue


        print(f"üß† –û–±–Ω–æ–≤–ª—è–µ–º: {program} / {module} / {discipline}")
        combined_text = "\n".join(text_blocks)[:4000]

        prompt = (
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ¬´{discipline}¬ª). "
            f"–í—ã–¥–µ–ª–∏ 250-300 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏.\n\n"
            f"{combined_text}"
        )

        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —É—á–µ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.4,
                max_tokens=500
            )

            new_keywords_raw = response.choices[0].message.content.strip()
            new_keywords = [kw.strip() for kw in new_keywords_raw.split(",") if kw.strip()]

            if not new_keywords:
                failed.append(f"{program} / {module} / {discipline} (GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ)")
                continue

            existing = await get_keywords_for_discipline(program, module, discipline)
            combined_keywords = list(sorted(set(existing + new_keywords)))

            await update_keywords_for_discipline(program, module, discipline, combined_keywords)
            updated.append(f"{program} / {module} / {discipline}")

            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            now_str = datetime.now().strftime(DATE_FORMAT)
            for idx in rows:
                await update_sheet_row(PROGRAM_SHEETS, "QA_Log", idx, {
                    "last_updated": now_str
                })

        except Exception as e:
            failed.append(f"{program} / {module} / {discipline} ‚ùå ({str(e)[:60]}...)")

    return updated, failed

MAX_MESSAGE_LENGTH = 4096

async def send_long_message(text: str, message):
    for i in range(0, len(text), MAX_MESSAGE_LENGTH):
        await message.answer(text[i:i+MAX_MESSAGE_LENGTH])
