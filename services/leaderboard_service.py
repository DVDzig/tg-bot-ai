import logging
from config import USER_SHEET_ID, USER_SHEET_NAME
from services.sheets import get_sheets_service, get_column_index_by_name
from services.user_service import get_status_by_xp
from services.google_sheets_service import get_all_users


logger = logging.getLogger(__name__)


async def get_leaderboard_text(current_user_id: int) -> str:
    service = get_sheets_service()

    try:
        result = service.spreadsheets().values().get(
            spreadsheetId=USER_SHEET_ID,
            range=f"{USER_SHEET_NAME}!A1:Z1000"
        ).execute()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."

    values = result.get("values", [])
    if not values or len(values) < 2:
        return "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    headers = values[0]
    header_map = {h: i for i, h in enumerate(headers)}

    xp_col = await get_column_index_by_name(USER_SHEET_ID, USER_SHEET_NAME, "xp")
    id_col = await get_column_index_by_name(USER_SHEET_ID, USER_SHEET_NAME, "user_id")
    name_col = await get_column_index_by_name(USER_SHEET_ID, USER_SHEET_NAME, "first_name")

    if None in (xp_col, id_col, name_col):
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ."

    leaderboard = []
    for row in values[1:]:
        try:
            user_id = int(row[id_col]) if id_col < len(row) else 0
            name = row[name_col] if name_col < len(row) else "‚Äî"
            xp_raw = row[xp_col] if xp_col < len(row) else "0"
            xp = int(xp_raw) if xp_raw.isdigit() else 0
            leaderboard.append((user_id, name, xp))
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {row} ‚Äî {e}")
            continue

    leaderboard.sort(key=lambda x: x[2], reverse=True)
    top_10 = leaderboard[:10]
    logger.info(f"–õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(leaderboard)}")

    text = "üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP:</b>\n\n"
    for idx, (uid, name, xp) in enumerate(top_10, start=1):
        you = " (—Ç—ã)" if uid == current_user_id else ""
        status = get_status_by_xp(xp)
        text += f"ü•á {name} ‚Äî {status}, {xp} XP{you}\n" if idx == 1 else \
                f"ü•à {name} ‚Äî {status}, {xp} XP{you}\n" if idx == 2 else \
                f"ü•â {name} ‚Äî {status}, {xp} XP{you}\n" if idx == 3 else \
                f"{idx}. {name} ‚Äî {status}, {xp} XP{you}\n"

    if current_user_id not in [u[0] for u in top_10]:
        for idx, (uid, name, xp) in enumerate(leaderboard, start=1):
            if uid == current_user_id:
                status = get_status_by_xp(xp)
                text += f"\nüë§ –¢—ã —Å–µ–π—á–∞—Å –Ω–∞ {idx} –º–µ—Å—Ç–µ\n"
                text += f"üìà –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å: {status}, {xp} XP\n"
                break

    return text


async def update_leaderboard_cache():
    users = await get_all_users()
    top_users = []

    for u in users:
        try:
            xp = int(u.get("xp", 0))
            name = u.get("first_name", "‚Äî")
            status = get_status_by_xp(xp)
            top_users.append((xp, name, status))
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {u} ‚Äî {e}")
            continue

    top_users.sort(reverse=True)
    logger.info("–ö—ç—à –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")


async def get_user_position_info(user_id: int) -> str:
    service = get_sheets_service()
    try:
        result = service.spreadsheets().values().get(
            spreadsheetId=USER_SHEET_ID,
            range=f"{USER_SHEET_NAME}"
        ).execute()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    values = result.get("values", [])
    if not values or len(values) < 2:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    headers = values[0]
    header_map = {h: i for i, h in enumerate(headers)}


    xp_col = await get_column_index_by_name(USER_SHEET_ID, USER_SHEET_NAME, "xp")
    id_col = await get_column_index_by_name(USER_SHEET_ID, USER_SHEET_NAME, "user_id")
    name_col = await get_column_index_by_name(USER_SHEET_ID, USER_SHEET_NAME, "first_name")
    status_col = await get_column_index_by_name(USER_SHEET_ID, USER_SHEET_NAME, "status")

    if None in (xp_col, id_col, name_col, status_col):
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ."


    leaderboard = []
    for row in values[1:]:
        try:
            uid = int(row[id_col])
            xp = int(row[xp_col]) if xp_col < len(row) else 0
            name = row[name_col] if name_col < len(row) else "–ë–µ–∑ –∏–º–µ–Ω–∏"
            status = row[status_col] if status_col < len(row) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            leaderboard.append((uid, name, status, xp))
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {row} ‚Äî {e}")
            continue

    leaderboard.sort(key=lambda x: x[3], reverse=True)

    for idx, (uid, name, status, xp) in enumerate(leaderboard, start=1):
        if uid == user_id:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {idx}")
            if xp <= 10:
                remaining = 11 - xp
                return f"üë§ –¢—ã —Å–µ–π—á–∞—Å –Ω–∞ {idx} –º–µ—Å—Ç–µ\nüìà –î–æ —É—Ä–æ–≤–Ω—è ¬´–û–ø—ã—Ç–Ω—ã–π¬ª –æ—Å—Ç–∞–ª–æ—Å—å {remaining} XP"
            return f"üë§ –¢—ã —Å–µ–π—á–∞—Å –Ω–∞ {idx} –º–µ—Å—Ç–µ\nüéâ –¢—ã –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    return "–¢—ã –µ—â—ë –Ω–µ –≤ —Å–ø–∏—Å–∫–µ ‚Äî –∑–∞–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å!"
