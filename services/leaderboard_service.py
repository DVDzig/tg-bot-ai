from config import USER_SHEET_ID, USER_SHEET_NAME
from utils.sheets import get_sheets_service
from utils.xp_logic import get_status_by_xp, get_next_status_info
from google_sheets_service import get_all_users


async def get_leaderboard_text(current_user_id: int) -> str:
    service = get_sheets_service()
    result = service.spreadsheets().values().get(
        spreadsheetId=USER_SHEET_ID,
        range=f"{USER_SHEET_NAME}!A,C,R"  # A: user_id, C: first_name, R: xp
    ).execute()

    values = result.get("values", [])
    leaderboard = []

    for row in values[1:]:  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if len(row) >= 3:
            user_id = int(row[0])
            name = row[1]
            xp = int(row[2])
            leaderboard.append((user_id, name, xp))

    leaderboard.sort(key=lambda x: x[2], reverse=True)

    top_10 = leaderboard[:10]
    text = "üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP:</b>\n\n"

    for idx, (uid, name, xp) in enumerate(top_10, start=1):
        you = " (—Ç—ã)" if uid == current_user_id else ""
        status = get_status_by_xp(xp)
        text += f"ü•á {name} ‚Äî {status}, {xp} XP{you}\n" if idx == 1 else \
                f"ü•à {name} ‚Äî {status}, {xp} XP{you}\n" if idx == 2 else \
                f"ü•â {name} ‚Äî {status}, {xp} XP{you}\n" if idx == 3 else \
                f"{idx}. {name} ‚Äî {status}, {xp} XP{you}\n"

    # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–µ —Ç–æ–ø–∞
    if current_user_id not in [u[0] for u in top_10]:
        for idx, (uid, name, xp) in enumerate(leaderboard, start=1):
            if uid == current_user_id:
                status = get_status_by_xp(xp)
                text += f"\nüë§ –¢—ã —Å–µ–π—á–∞—Å –Ω–∞ {idx} –º–µ—Å—Ç–µ\n"
                text += f"üìà –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å: {status}, {xp} XP\n"
                break

    return text

async def update_leaderboard_cache():
    users = await get_all_users()
    top_users = []

    for u in users:
        try:
            xp = int(u.get("xp", 0))
            name = u.get("first_name", "‚Äî")
            status = get_status_by_xp(xp)
            top_users.append((xp, name, status))
        except:
            continue

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ XP
    top_users.sort(reverse=True)

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ global –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é / redis / —Ñ–∞–π–ª
    with open("leaderboard.txt", "w", encoding="utf-8") as f:
        for idx, (xp, name, status) in enumerate(top_users[:10], start=1):
            f.write(f"{idx}. {name} ‚Äî {status}, {xp} XP\n")

async def get_user_position_info(user_id: int) -> str:
    users = await get_all_users()

    # –°–æ–±–∏—Ä–∞–µ–º (user_id, xp) –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    ranked = []
    for u in users:
        try:
            xp = int(u.get("xp", 0))
            uid = int(u.get("user_id"))
            ranked.append((uid, xp))
        except:
            continue

    ranked.sort(key=lambda x: x[1], reverse=True)

    # –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    position = next((idx + 1 for idx, (uid, _) in enumerate(ranked) if uid == user_id), None)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ
    user_xp = next((xp for uid, xp in ranked if uid == user_id), 0)
    user_status = get_status_by_xp(user_xp)
    next_status, to_next = get_next_status_info(user_xp)

    if position is None:
        return "–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."

    msg = f"üë§ –¢—ã —Å–µ–π—á–∞—Å –Ω–∞ <b>{position}</b> –º–µ—Å—Ç–µ\n"
    if next_status:
        msg += f"üìà –î–æ —É—Ä–æ–≤–Ω—è ¬´{next_status}¬ª –æ—Å—Ç–∞–ª–æ—Å—å <b>{to_next} XP</b>"
    else:
        msg += f"üéâ –¢—ã –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"

    return msg
