from aiogram import Router, F
from aiogram.types import Message
from services.yookassa_service import generate_payment_link
from config import USER_SHEET_ID
from services.sheets import get_sheets_service
from datetime import datetime


router = Router()

async def log_pending_payment(user_id: int, payment_id: str, quantity: int, payment_type: str):
    # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ Google Sheets, –∫—É–¥–∞ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–æ–≥–∏
    SHEET_NAME = "PaymentsLog"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
    service = get_sheets_service()

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü timestamp
    timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    row = [
        str(user_id),           # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        str(quantity),          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏)
        str(payment_type),      # –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "subscription" –∏–ª–∏ "questions")
        "pending",              # –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–∫–∞ –æ–Ω –≤ –æ–∂–∏–¥–∞–Ω–∏–∏)
        "payment",              # –ú–µ—Å—Ç–æ –¥–ª—è "—Å–æ–±—ã—Ç–∏—è" ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"
        payment_id,             # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
        timestamp               # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    body = {"values": [row]}

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    sheet = service.spreadsheets().values()
    sheet.append(
        spreadsheetId=USER_SHEET_ID,   # ID —Ç–∞–±–ª–∏—Ü—ã
        range=f"{SHEET_NAME}!A:G",     # –î–∏–∞–ø–∞–∑–æ–Ω, –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç A –¥–æ G)
        valueInputOption="RAW",        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
        body=body                      # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    ).execute()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–õ–∞–π—Ç)
@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç (7 –¥–Ω–µ–π)")
async def handle_light_subscription_payment(message: Message):
    user_id = message.from_user.id
    amount = 149  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –õ–∞–π—Ç –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–ü—Ä–æ)
@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ")
async def handle_pro_subscription_payment(message: Message):
    user_id = message.from_user.id
    amount = 299  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ü—Ä–æ
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ü—Ä–æ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 1 –≤–æ–ø—Ä–æ—Å–∞
@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å 1 –≤–æ–ø—Ä–æ—Å")
async def handle_single_question_purchase(message: Message):
    user_id = message.from_user.id
    amount = 10  # –°—Ç–æ–∏–º–æ—Å—Ç—å 1 –≤–æ–ø—Ä–æ—Å–∞
    description = "–ü–æ–∫—É–ø–∫–∞ 1 –≤–æ–ø—Ä–æ—Å–∞"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 1 –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤")
async def handle_ten_questions_purchase(message: Message):
    user_id = message.from_user.id
    amount = 90  # –°—Ç–æ–∏–º–æ—Å—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤
    description = "–ü–æ–∫—É–ø–∫–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 50 –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å 50 –≤–æ–ø—Ä–æ—Å–æ–≤")
async def handle_fifty_questions_purchase(message: Message):
    user_id = message.from_user.id
    amount = 450  # –°—Ç–æ–∏–º–æ—Å—Ç—å 50 –≤–æ–ø—Ä–æ—Å–æ–≤
    description = "–ü–æ–∫—É–ø–∫–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 100 –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å 100 –≤–æ–ø—Ä–æ—Å–æ–≤")
async def handle_hundred_questions_purchase(message: Message):
    user_id = message.from_user.id
    amount = 900  # –°—Ç–æ–∏–º–æ—Å—Ç—å 100 –≤–æ–ø—Ä–æ—Å–æ–≤
    description = "–ü–æ–∫—É–ø–∫–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

async def log_successful_payment(user_id: int, quantity: int, payment_type: str, payment_id: str):
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂
    row = [
        str(user_id),
        payment_id,
        payment_type,
        quantity,
        "success"
    ]
    await append_payment_log(row)
