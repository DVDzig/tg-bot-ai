from aiogram import Router, F
from aiogram.types import Message
from services.yookassa_service import generate_payment_link

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–õ–∞–π—Ç)
@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç (7 –¥–Ω–µ–π)")
async def handle_light_subscription_payment(message: Message):
    user_id = message.from_user.id
    amount = 149  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç –Ω–∞ 7 –¥–Ω–µ–π"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –õ–∞–π—Ç –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–ü—Ä–æ)
@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ")
async def handle_pro_subscription_payment(message: Message):
    user_id = message.from_user.id
    amount = 299  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ü—Ä–æ
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ü—Ä–æ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 1 –≤–æ–ø—Ä–æ—Å–∞
@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å 1 –≤–æ–ø—Ä–æ—Å")
async def handle_single_question_purchase(message: Message):
    user_id = message.from_user.id
    amount = 10  # –°—Ç–æ–∏–º–æ—Å—Ç—å 1 –≤–æ–ø—Ä–æ—Å–∞
    description = "–ü–æ–∫—É–ø–∫–∞ 1 –≤–æ–ø—Ä–æ—Å–∞"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 1 –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤")
async def handle_ten_questions_purchase(message: Message):
    user_id = message.from_user.id
    amount = 90  # –°—Ç–æ–∏–º–æ—Å—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤
    description = "–ü–æ–∫—É–ø–∫–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 50 –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å 50 –≤–æ–ø—Ä–æ—Å–æ–≤")
async def handle_fifty_questions_purchase(message: Message):
    user_id = message.from_user.id
    amount = 450  # –°—Ç–æ–∏–º–æ—Å—Ç—å 50 –≤–æ–ø—Ä–æ—Å–æ–≤
    description = "–ü–æ–∫—É–ø–∫–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 100 –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å 100 –≤–æ–ø—Ä–æ—Å–æ–≤")
async def handle_hundred_questions_purchase(message: Message):
    user_id = message.from_user.id
    amount = 900  # –°—Ç–æ–∏–º–æ—Å—Ç—å 100 –≤–æ–ø—Ä–æ—Å–æ–≤
    description = "–ü–æ–∫—É–ø–∫–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤"

    try:
        payment_link = await generate_payment_link(amount, description, user_id)
        await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")

async def log_successful_payment(user_id: int, quantity: int, payment_type: str, payment_id: str):
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂
    row = [
        str(user_id),
        payment_id,
        payment_type,
        quantity,
        "success"
    ]
    await append_payment_log(row)
