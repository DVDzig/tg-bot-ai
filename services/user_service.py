from services.google_sheets_service import (
    update_user_plan, 
    get_all_users,
    get_column_index, 
    get_sheets_service,
    get_column_value_by_name,
)
from datetime import datetime, timedelta
from config import USER_SHEET_ID, USER_SHEET_NAME
import pytz
from services.sheets import update_sheet_row, get_user_row_by_id

async def get_or_create_user(user) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    row = await get_user_row_by_id(user.id)
    
    if row:
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user_data = {
        "user_id": user.id,
        "username": user.username or "",  # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç username
        "first_name": user.first_name,
        "last_name": user.last_name or "",  # –ï—Å–ª–∏ last_name –ø—É—Å—Ç–æ–µ, —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        "language_code": user.language_code or "en",  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - "en"
        "is_premium": str(getattr(user, "is_premium", False)).lower(),
        "first_interaction": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
        "last_interaction": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
        "question_count": 0,
        "day_count": 0,
        "status": "–ù–æ–≤–∏—á–æ–∫",
        "xp": 0,
        "xp_week": 0,
        "paid_questions": 0,
        "last_free_reset": "2025-01-01 00:00:00",
        "free_questions": 10,  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        "streak_days": 0,
        "daily_mission_done": "0",
        "weekly_mission_done": "0",
        "streak_mission_done": "0",
        "premium_status": "none"  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ "none"
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
    service = get_sheets_service()
    range_ = f"{USER_SHEET_NAME}!A2:Z"  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–≤–∞—è ‚Äî —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
    body = {
        "values": [list(new_user_data.values())]
    }
    service.spreadsheets().values().append(
        spreadsheetId=USER_SHEET_ID,
        range=range_,
        valueInputOption="RAW",
        body=body
    ).execute()

def get_status_by_xp(xp: int) -> str:
    if xp >= 5000:
        return "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å"
    elif xp >= 1000:
        return "üî• –õ–µ–≥–µ–Ω–¥–∞"
    elif xp >= 300:
        return "üß† –ù–∞—Å—Ç–∞–≤–Ω–∏–∫"
    elif xp >= 150:
        return "üëë –≠–∫—Å–ø–µ—Ä—Ç"
    elif xp >= 50:
        return "üöÄ –ü—Ä–æ—Ñ–∏"
    elif xp >= 10:
        return "üî∏ –û–ø—ã—Ç–Ω—ã–π"
    else:
        return "üü¢ –ù–æ–≤–∏—á–æ–∫"

def get_next_status(xp: int) -> tuple[str, int]:
    levels = [
        (5000, "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å"),
        (1000, "üî• –õ–µ–≥–µ–Ω–¥–∞"),
        (300, "üß† –ù–∞—Å—Ç–∞–≤–Ω–∏–∫"),
        (150, "üëë –≠–∫—Å–ø–µ—Ä—Ç"),
        (50, "üöÄ –ü—Ä–æ—Ñ–∏"),
        (10, "üî∏ –û–ø—ã—Ç–Ω—ã–π"),
        (0, "üü¢ –ù–æ–≤–∏—á–æ–∫"),
    ]

async def activate_subscription(user_id: int, duration_days: int, internal_id: str):
    # "lite" –∏–ª–∏ "pro" —á–∏—Ç–∞–µ–º –∏–∑ –ª–æ–≥–æ–≤ –ø–æ internal_id (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç)
    plan_type = "lite" if "lite" in internal_id else "pro"

    until_date = (datetime.utcnow() + timedelta(days=int(duration_days))).strftime("%Y-%m-%d")

    await update_user_plan(user_id, plan_type, until_date)

async def get_user_profile_text(user) -> str:
    if user.id == 150532949:
        return (
            f"üë§ –ò–º—è: {user.first_name}\n"
            f"üëë –°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî üü©üü©üü©üü©üü© 100%\n"
            f"‚≠ê –¢–≤–æ–π XP: 9999 XP\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ‚Äî\n\n"
            f"üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
            f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: 999\n"
            f"‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ: 999\n\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ‚àû\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: ‚àû\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: ‚àû\n\n"
            f"üî• –£ —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç ‚Äî —Ç—ã –°–æ–∑–¥–∞—Ç–µ–ª—å.\n\n"
            f"üîì –ü–æ–¥–ø–∏—Å–∫–∞: –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (–∞–¥–º–∏–Ω)\n"
        )

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
    row = await get_user_row_by_id(user.id)
    if not row:
        return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    first_name = row.get("first_name") or user.first_name
    xp = int(row.get("xp", 0))
    status = get_status_by_xp(xp)
    next_status, to_next = get_next_status(xp)

    free_q = int(row.get("free_questions", 0))
    paid_q = int(row.get("paid_questions", 0))

    last_login = row.get("last_interaction", "")
    last_login_str = datetime.strptime(last_login, "%Y-%m-%d %H:%M:%S").strftime("%d %B %Y, %H:%M") if last_login else "‚Äî"

    today_q = int(row.get("day_count", 0))
    week_q = int(row.get("xp_week", 0))
    total_q = int(row.get("question_count", 0))

    plan = row.get("plan", "")
    plan_text = ""
    if plan == "lite":
        plan_text = "üîì –ü–æ–¥–ø–∏—Å–∫–∞: –õ–∞–π—Ç (–±–µ–∑–ª–∏–º–∏—Ç)"
    elif plan == "pro":
        plan_text = "üîì –ü–æ–¥–ø–∏—Å–∫–∞: –ü—Ä–æ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, 100 –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–∏–¥–µ–æ)"

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ 5 –∫—É–±–∏–∫–æ–≤
    filled_blocks = min(xp * 5 // max(to_next + xp, 1), 5)
    progress_bar = f"{'üü©' * filled_blocks}{'‚¨úÔ∏è' * (5 - filled_blocks)}"
    progress_percent = round((xp / (xp + to_next)) * 100) if to_next else 100

    return (
        f"üë§ –ò–º—è: {first_name}\n"
        f"üéñÔ∏è –°—Ç–∞—Ç—É—Å: {status} ‚Äî {progress_bar} {progress_percent}%\n"
        f"‚≠ê –¢–≤–æ–π XP: {xp} XP\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login_str}\n\n"

        f"üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: {free_q}\n"
        f"‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ: {paid_q}\n\n"

        f"üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today_q} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n"
        f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_q} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_q} –≤–æ–ø—Ä–æ—Å(–æ–≤)\n\n"

        f"üî• –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –∑–∞–¥–∞–ª {today_q} –∏–∑ 3 –≤–æ–ø—Ä–æ—Å–æ–≤!\n\n"
        f"üí° –ë–ª–∏–∂–∞–π—à–∏–π —Å—Ç–∞—Ç—É—Å: {next_status} (–µ—â—ë {to_next} XP)\n\n"
        f"{plan_text}\n\n"
        f"üëâ –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üõí –ú–∞–≥–∞–∑–∏–Ω¬ª"
    )

async def increase_question_count(user_id: int):
    row = await get_user_row_by_id(user_id)
    if not row:
        return

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.now(pytz.timezone("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
    question_count = int(row.get("question_count", 0)) + 1
    day_count = int(row.get("day_count", 0)) + 1
    xp_week = int(row.get("xp_week", 0)) + 1
    streak_days = int(row.get("streak_days", 0)) + 1

    updates = {
        "question_count": question_count,
        "day_count": day_count,
        "xp_week": xp_week,
        "streak_days": streak_days,
        "last_interaction": now
    }

    await update_sheet_row(row.sheet_id, row.sheet_name, row.index, updates)

async def decrease_question_limit(user_id: int):
    row = await get_user_row_by_id(user_id)
    if not row:
        return

    free = int(row.get("free_questions", 0))
    paid = int(row.get("paid_questions", 0))

    if free <= 0 and paid <= 0:
        return  # –ù–µ—á–µ–≥–æ —Å–ø–∏—Å—ã–≤–∞—Ç—å

    if free > 0:
        free -= 1
    else:
        paid -= 1

    updates = {
        "free_questions": free,
        "paid_questions": paid,
    }

    await update_sheet_row(row.sheet_id, row.sheet_name, row.index, updates)


async def add_xp_and_update_status(user_id: int, delta: int = 1):
    row = await get_user_row_by_id(user_id)
    if not row:
        return

    plan = row.get("premium_status", "").lower()
    if plan in ("lite", "pro"):
        return  # XP –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞

    current_xp = int(row.get("xp", 0))
    new_xp = current_xp + delta
    new_status = get_status_by_xp(new_xp)

    now = datetime.now(pytz.timezone("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")

    updates = {
        "xp": new_xp,
        "status": new_status,
        "last_interaction": now
    }

    await update_sheet_row(row.sheet_id, row.sheet_name, row.index, updates)
    
async def monthly_bonus_for_user(user_row):
    today = datetime.utcnow().strftime("%Y-%m-%d")
    last_bonus = user_row.get("last_bonus_date")

    if last_bonus == today:
        return  # –£–∂–µ –≤—ã–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è

    status = user_row.get("status", "–ù–æ–≤–∏—á–æ–∫")
    current = int(user_row.get("free_questions", 0))

    bonus_map = {
        "–ù–æ–≤–∏—á–æ–∫": 5,
        "–û–ø—ã—Ç–Ω—ã–π": 10,
        "–ü—Ä–æ—Ñ–∏": 20,
        "–≠–∫—Å–ø–µ—Ä—Ç": 30,
        "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫": 50,
        "–õ–µ–≥–µ–Ω–¥–∞": 75,
        "–°–æ–∑–¥–∞—Ç–µ–ª—å": 100
    }

    bonus = bonus_map.get(status, 0)
    updates = {
        "free_questions": str(current + bonus),
        "last_bonus_date": today
    }

    await update_sheet_row(user_row.sheet_id, user_row.sheet_name, user_row.index, updates)

async def apply_monthly_bonus_to_all_users():
    users = await get_all_users()
    for user in users:
        await monthly_bonus_for_user(user)
        
async def create_mission(sheet_id: str, mission_name: str, user_id: int):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–∏—Å—Å–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param sheet_id: ID —Ç–∞–±–ª–∏—Ü—ã
    :param mission_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–∏—Å—Å–∏–∏
    mission_column = await get_column_index(sheet_id, "Users", mission_name)

    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    service = get_sheets_service()
    service.spreadsheets().values().update(
        spreadsheetId=sheet_id,
        range=f"Users!{chr(65 + mission_column)}{user_id + 2}",  # –°—Ç—Ä–æ–∫–∏ —Å 2 (–ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        valueInputOption="RAW",
        body={"values": [["–í –ø—Ä–æ—Ü–µ—Å—Å–µ"]]}  # –°—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ).execute()
    
async def update_user_subscription(user_id: int, plan: str):
    row = await get_user_row_by_id(user_id)
    if row:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ "premium_status"
        subscription_column = await get_column_index(row.sheet_id, "Users", "premium_status")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        service = get_sheets_service()
        service.spreadsheets().values().update(
            spreadsheetId=row.sheet_id,
            range=f"Users!{chr(65 + subscription_column)}{row.index + 2}",
            valueInputOption="RAW",
            body={"values": [[plan]]}
        ).execute()

async def add_paid_questions(user_id: int, quantity: int):
    row = await get_user_row_by_id(user_id)
    if row:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ "paid_questions"
        paid_questions_column = await get_column_index(row.sheet_id, "Users", "paid_questions")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        current_paid_questions = int(await get_column_value_by_name(row.sheet_id, "Users", row.index, "paid_questions"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        updated_paid_questions = current_paid_questions + quantity

        service = get_sheets_service()
        service.spreadsheets().values().update(
            spreadsheetId=row.sheet_id,
            range=f"Users!{chr(65 + paid_questions_column)}{row.index + 2}",
            valueInputOption="RAW",
            body={"values": [[updated_paid_questions]]}
        ).execute()

async def update_user_after_answer(user_id: int):
    await increase_question_count(user_id)
    await decrease_question_limit(user_id)
    await add_xp_and_update_status(user_id)
